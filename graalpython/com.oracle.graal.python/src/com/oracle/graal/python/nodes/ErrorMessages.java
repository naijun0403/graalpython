/*
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The Universal Permissive License (UPL), Version 1.0
 *
 * Subject to the condition set forth below, permission is hereby granted to any
 * person obtaining a copy of this software, associated documentation and/or
 * data (collectively the "Software"), free of charge and under any and all
 * copyright rights in the Software, and any and all patent rights owned or
 * freely licensable by each licensor hereunder covering either (i) the
 * unmodified Software as contributed to or provided by such licensor, or (ii)
 * the Larger Works (as defined below), to deal in both
 *
 * (a) the Software, and
 *
 * (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
 * one is included with the Software each a "Larger Work" to which the Software
 * is contributed by such licensors),
 *
 * without restriction, including without limitation the rights to copy, create
 * derivative works of, display, perform, and distribute the Software and make,
 * use, sell, offer for sale, import, export, have made, and have sold the
 * Software and the Larger Work(s), and to sublicense the foregoing rights on
 * either these or other terms.
 *
 * This license is subject to the following condition:
 *
 * The above copyright notice and either this complete permission notice or at a
 * minimum a reference to the UPL must be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.oracle.graal.python.nodes;

public abstract class ErrorMessages {

    public static final String ABSOLUTE_VALUE_TOO_LARGE = "absolute value too large";
    public static final String S_EXPECTED_SD_ARGS_GOT_D = "%s expected %s%d argument%s, got %d";
    public static final String UNPACKED_TUPLE_SHOULD_HAVE_D_ELEMS = "unpacked tuple should have %s%d element%s, but has %d";
    public static final String ARG_AFTER_MUST_BE_ITERABLE = "argument after * must be an iterable, not %p";
    public static final String ARG_AFTER_MUST_BE_MAPPING = "%s() argument after ** must be a mapping, not %p";
    public static final String ARG_CONVERTED_NOT_EXECUTABLE = "argument converted is not executable";
    public static final String ARG_CANNOT_BE_NEGATIVE = "%s argument cannot be negative";
    public static final String ARG_D_MUST_BE_S = "%s arg %d must be a %s";
    public static final String ARG_D_MUST_BE_S_NOT_P = "%s argument %d must be %s, not %p";
    public static final String ARG_S_MUST_BE_S_NOT_P = "%s argument %s must be %s, not %p";
    public static final String ARG_D_MUST_BE_S_OR_S = "%s argument %d must be '%s' or '%s'";
    public static final String ARG_S_MUST_BE_A_LIST_OR_TUPLE = "%s must be a list or tuple";
    public static final String ARG_IS_EMPTY_SEQ = "%s() arg is an empty sequence";
    public static final String ARG_MUST_BE_INT_OR_HAVE_FILENO_METHOD = "argument must be an int, or have a fileno() method.";
    public static final String ARG_MUST_BE_NUMBER = "%s argument must be a number, not '%p'";
    public static final String ARG_MUST_BE_S_NOT_P = "%s argument must be %s, not %p";
    public static final String ARGUMENTS_MUST_BE_ITERATORS = "Arguments must be iterators";
    public static final String S_BRACKETS_ARG_MUST_BE_S_NOT_P = "%s() argument must be %s, not %p";
    public static final String S_BRACKETS_ARG_MUST_BE_READ_WRITE_BYTES_LIKE_NOT_P = "%s() argument must be read-write bytes-like object, not %p";
    public static final String ARG_MUST_BE_CALLABLE = "argument must be callable";
    public static final String S_ARG_MUST_BE_CALLABLE = "%s argument must be callable";
    public static final String ARG_MUST_BE_STRING_OR_BYTELIKE_OR_NUMBER = "%s argument must be a string, a bytes-like object or a number, not %p";
    public static final String ARG_MUST_BE_STRING_OR_NUMBER = "%s argument must be a string or a number, not '%p'";
    public static final String ARG_MUST_NOT_BE_ZERO = "%s arg %d must not be zero";
    public static final String ARG_MUST_NOT_BE_EMPTY = "%s arg %d must not be empty";
    public static final String ARG_NOT_IN_RANGE = "%s arg not in range(%s)";
    public static final String ARG_SHOULD_BE_INT_BYTESLIKE_OBJ = "argument should be integer or bytes-like object, not '%p'";
    public static final String ARG_SHOULD_BE_INT_OR_NONE = "argument should be integer or None, not %p";
    public static final String ARG_SHOULD_NOT_EXCEED = "%s argument should not exceed %d";
    public static final String ARGS_CHANGED_DURING_ITERATION = "args changed during iteration";
    public static final String ARGS_MUST_HAVE_SAME_LENGTH = "%s arguments must have same length";
    public static final String ARRAY_ASSIGN_OUT_OF_BOUNDS = "array assignment index out of range";
    public static final String ARRAY_OUT_OF_BOUNDS = "array index out of range";
    public static final String ARRAY_SIZE_TOO_LARGE = "array size too large";
    public static final String ATTEMP_TO_RELEASE_RECURSIVE_LOCK = "attempt to release recursive lock not owned by thread";
    public static final String ATTEMPT_TO_ASSIGN_SEQ_OF_SIZE_TO_SLICE_OF_SIZE = "attempt to assign sequence of size %d to extended slice of size %d";
    public static final String KEY_IN_S_MUST_BE_STRING = "Key in %s.%s must be str, not %p";
    public static final String ITEM_IN_S_MUST_BE_STRING = "Item in %s.%s must be str, not %p";
    public static final String ATTR_NAME_MUST_BE_STRING = "attribute name must be string, not '%p'";
    public static final String S_MUST_BE_STRING_NOT_S = "\"%s\" must be string, not %.200s";
    public static final String ATTR_S_OF_S_IS_NOT_READABLE = "attribute %s of %s objects is not readable";
    public static final String ATTR_S_OF_S_IS_NOT_WRITABLE = "attribute %s of %s is not writable";
    public static final String ATTR_S_OF_S_OBJ_IS_NOT_WRITABLE = "attribute %s of %s object is not writable";
    public static final String ATTR_S_READONLY = "attribute %s is read-only";
    public static final String ATTR_VALUE_MUST_BE_BOOL = "attribute value type must be bool";
    public static final String B_REQUIRES_BYTES_OR_OBJ_THAT_IMPLEMENTS_S_NOT_P = "%%b requires a bytes-like object, or an object that implements __bytes__, not '%p'";
    public static final String ARG_TYPE_MUST_BE = "%s argument type must be %s";
    public static final String S_S_BAD_ARG_TO_INTERNAL_FUNC = "%s:%s: bad argument to internal function.";
    public static final String BAD_ARG_TO_INTERNAL_FUNC = "bad argument to internal function";
    public static final String BAD_ARG_TO_INTERNAL_FUNC_P = "bad argument to internal function %p";
    public static final String BAD_ARG_TO_INTERNAL_FUNC_S = "bad argument to internal function %s";
    public static final String BAD_ARG_TO_INTERNAL_FUNC_WAS_S_P = "bad argument to internal function, was '%s' (type '%p')";
    public static final String BAD_ARG_TYPE_FOR_BUILTIN_OP = "bad argument type for built-in operation";
    public static final String BAD_COMPRESSION_LEVEL = "Bad compression level";
    public static final String BAD_FILE_DESCRIPTOR = "bad file descriptor";
    public static final String BAD_MARSHAL_DATA = "bad marshal data";
    public static final String BAD_MARSHAL_DATA_S = "bad marshal data (%s)";
    public static final String BAD_MARSHAL_DATA_EOF = "marshal data too short";
    public static final String BAD_MARSHAL_DATA_NULL = "bad NULL object in marshal data";
    public static final String BAD_MEMBER_DESCR_TYPE_FOR_P = "bad memberdescr type for %p";
    public static final String BAD_OPERAND_FOR = "bad operand type for %s%s: '%p'";
    public static final String BAD_VALUES_IN_FDS_TO_KEEP = "bad value(s) in fds_to_keep";
    public static final String BASE_OUT_OF_RANGE_FOR_INT = "base is out of range for int()";
    public static final String BASES_MUST_BE_TYPES = "bases must be types";
    public static final String BASES_ITEM_CAUSES_INHERITANCE_CYCLE = "a __bases__ item causes an inheritance cycle";
    public static final String BASE_MUST_BE = "PyNumber_ToBase: base must be 2, 8, 10 or 16";
    public static final String BOOL_SHOULD_RETURN_BOOL = "__bool__ should return bool, returned %p";
    public static final String BOTH_POINTS_MUST_HAVE_THE_SAME_NUMBER_OF_DIMENSIONS = "both points must have the same number of dimensions";
    public static final String BUFFER_INDICES_MUST_BE_INTS = "buffer indices must be integers, not %p";
    public static final String BYTE_STR_IS_TOO_LARGE = "byte string is too large";
    public static final String BYTEARRAY_OUT_OF_BOUNDS = "bytearray index out of range";
    public static final String BYTEORDER_MUST_BE_LITTLE_OR_BIG = "byteorder must be either 'little' or 'big'";
    public static final String BYTESLIKE_OBJ_REQUIRED = "a bytes-like object is required, not '%p'";
    public static final String BYTE_STRING_OF_LEN_ONE_ONLY = "%s argument 2 must be a byte string of length 1, not %s";
    public static final String BYTE_MUST_BE_IN_RANGE = "byte must be in range(0, 256)";
    public static final String C_ARG_NOT_IN_RANGE = "%%c arg not in range(0x%s)";
    public static final String CALL_STACK_NOT_DEEP_ENOUGH = "call stack is not deep enough";
    public static final String CALLING_ARG_CONVERTER_FAIL_EXPECTED_D_GOT_P = "calling argument converter failed; expected %d but got %d parameters.";
    public static final String CALLING_ARG_CONVERTER_FAIL_INCOMPATIBLE_PARAMS = "calling argument converter failed; incompatible parameters '%s'";
    public static final String CALLING_ARG_CONVERTER_FAIL_UNEXPECTED_RETURN = "calling argument converter failed; unexpected return value %s";
    public static final String CALLING_NATIVE_FUNC_EXPECTED_ARGS = "Calling native function %s expected %d arguments but got %d.";
    public static final String CALLING_NATIVE_FUNC_FAILED = "Calling native function %s failed: %m";
    public static final String DECODER_RETURNED_P_INSTEAD_OF_BYTES = "'%s' decoder returned '%p' instead of 'str'; use codecs.decode() to decode to arbitrary types";
    public static final String ENCODER_RETURNED_P_INSTEAD_OF_BYTES = "'%s' encoder returned '%p' instead of 'bytes'; use codecs.encode() to encode to arbitrary types";
    public static final String S_ENCODER_RETURNED_P_INSTEAD_OF_BYTES = "'%s' encoder returned '%p' instead of 'bytes'; use codecs.encode() to encode to arbitrary types";
    public static final String ENCODER_S_RETURNED_S_INSTEAD_OF_BYTES = "encoder %s returned %s instead of bytes; use codecs.encode() to encode to arbitrary types";
    public static final String DECODER_S_RETURNED_P_INSTEAD_OF_STR = "'%s' decoder returned '%p' instead of 'str'; use codecs.decode() to decode to arbitrary types";
    public static final String EXPECTED_D_ARGS = "expected %d arguments";
    public static final String CAN_ONLY_ASSIGN_S_TO_S_S_NOT_P = "can only assign %s to %s.%s, not %p";
    public static final String CAN_ONLY_ASSIGN_S_TO_P_S_NOT_P = "can only assign %s to %p.%s, not %p";
    public static final String CAN_ONLY_ASSIGN_NON_EMPTY_TUPLE_TO_P = "can only assign non-empty tuple to %p.__bases__, not ()";
    public static final String CAN_ONLY_CONCAT_S_NOT_P_TO_S = "can only concatenate %s (not \"%p\") to %s";
    public static final String CAN_ONLY_JOIN_ITERABLE = "can only join an iterable";
    public static final String CANNOT_ASSIGN_TO = "cannot assign to %s";
    public static final String CANNOT_ASSIGN_TO_COMPREHENSION = "cannot assign to %s comprehension";
    public static final String CANNOT_BE_INTEPRETED_AS_LONG = "%s cannot be interpreted as long (type %p)";
    public static final String S_CANNOT_BE_NEGATIVE_INTEGER_D = "%s cannot be negative integer (%d)";
    public static final String CANNOT_CALL_CTOR_OF = "cannot call constructor of %s";
    public static final String CANNOT_CLOSE_EXPORTED_PTRS_EXIST = "cannot close exported pointers exist";
    public static final String CANNOT_CONVERT_DICT_UPDATE_SEQ = "cannot convert dictionary update sequence element #%d to a sequence";
    public static final String CANNOT_CONVERT_FLOAT_F_TO_INT = "cannot convert float %f to integer";
    public static final String CANNOT_CONVERT_OBJ_TO_C_STRING = "Cannot convert object of type %p to C string.";
    public static final String CANNOT_CONVERT_P_OBJ_TO_S = "cannot convert '%p' object to %s";
    public static final String CANNOT_CONVERT_S_OBJ_TO_P = "cannot convert '%s' object to %p";
    public static final String CANNOT_CONVERT_S_TO_INT = "cannot convert %s to integer";
    public static final String CANNOT_CONVERT_S_TO_INT_RATIO = "cannot convert %s to integer ratio";
    public static final String CANNOT_CONVERT_TO = "cannot convert %s to %s";
    public static final String CANNOT_CREATE_BUFFER_FOR = "cannot create buffer for object %s";
    public static final String CANNOT_CREATE_CALL_TARGET = "cannot create a call target from the code object: %p";
    public static final String CANNOT_CREATE_INSTANCES = "cannot create '%s' instances";
    public static final String CANNOT_CREATE_WEAK_REFERENCE_TO = "cannot create weak reference to '%p' object";
    public static final String CANNOT_DELETE_ATTRIBUTE = "can't delete %s.%s";
    public static final String CANNOT_DELETE_MEMORY = "cannot delete memory";
    public static final String CANNOT_MODIFY_READONLY_MEMORY = "cannot modify read-only memory";
    public static final String CANNOT_EXTEND_INCOMPLETE_P = "Cannot extend an incomplete type '%p'";
    public static final String CANNOT_FIT_P_INTO_INDEXSIZED_INT = "cannot fit '%p' into an index-sized integer";
    public static final String CANNOT_GET_SHAPE_OF_NATIVE_CLS = "cannot get shape of native class";
    public static final String CANNOT_GET_CONSISTEMT_METHOD_RESOLUTION = "Cannot create a consistent method resolution\norder (MRO) for bases %s";
    public static final String CANNOT_HANDLE_ZIP_FILE = "cannot handle Zip file: '%s'";
    public static final String CANNOT_HASH_WRITEABLE_MEMORYVIEW = "cannot hash writable memoryview object";
    public static final String CANNOT_INDEX_D_DIMENSION_VIEW_WITH_D = "cannot index %d-dimension view with %d-element tuple";
    public static final String IMPORT_NOT_FOUND = "__import__ not found";
    public static final String CANNOT_IMPORT_NAME = "cannot import name '%s' from '%s' (%s)";
    public static final String CANNOT_IMPORT_NAME_CIRCULAR = "cannot import name '%s' from partially initialized module '%s' (most likely due to a circular import)";
    public static final String CANNOT_INITIALIZE_WITH = "cannot initialize %s with %s%s";
    public static final String CANNOT_LOAD = "cannot load %s: %s";
    public static final String CANNOT_LOAD_M = "cannot load %s: %m";
    public static final String CANNOT_RELEASE_UNAQUIRED_LOCK = "cannot release un-acquired lock";
    public static final String CANNOT_REENTER_TEE_ITERATOR = "cannot re-enter the tee iterator";
    public static final String CANNOT_SPECIFY_BOTH_COMMA_AND_UNDERSCORE = "Cannot specify both ',' and '_'.";
    public static final String CANNOT_SPECIFY_C_WITH_C = "Cannot specify '%c' with '%c'.";
    public static final String CANNOT_USE_FD_AND_FOLLOW_SYMLINKS_TOGETHER = "%s: cannot use fd and follow_symlinks together";
    public static final String CANT_CONCAT_P_TO_S = "can't concat %p to %s";
    public static final String CANT_CONVERT_TO_FLOAT = "can't convert %s to float";
    public static final String CANT_CONVERT_TO_STR_IMPLICITLY = "Can't convert '%p' object to str implicitly";
    public static final String CANT_COMPARE = "Can't compare %p and %p";
    public static final String CANT_DELETE = "can't delete '%s'";
    public static final String CAN_T_DELETE_NUMERIC_CHAR_ATTRIBUTE = "can't delete numeric/char attribute";
    public static final String CANT_EXTEND_JAVA_CLASS_NOT_JVM = "Java Class can be extended only in JVM mode.";
    public static final String CANT_EXTEND_JAVA_CLASS_NOT_TYPE = "Function extend needs a Java type as its argument not %p";
    public static final String CANT_FIND_MODULE = "can't find module '%s'";
    public static final String CANT_MULTIPLY_SEQ_BY_NON_INT = "can't multiply sequence by non-int of type '%p'";
    public static final String CANT_SET_N_S = "can't set %N.%s";
    public static final String CANT_SET_ATTRIBUTES_OF_TYPE = "can't set attributes of %s";
    public static final String CANT_SET_ATTRIBUTES_OF_TYPE_S = "can't set attributes of built-in/extension type '%s'";
    public static final String CANT_SPECIFY_DIRFD_WITHOUT_PATH = "%s: can't specify dir_fd without matching path";
    public static final String CANT_SPECIFY_TIMEOUT_FOR_NONBLOCKING = "can't specify a timeout for a non-blocking call";
    public static final String CANT_SUM_BYTEARRAY = "sum() can't sum bytearray [use b''.join(seq) instead]";
    public static final String CANT_SUM_BYTES = "sum() can't sum bytes [use b''.join(seq) instead]";
    public static final String CANT_SUM_STRINGS = "sum() can't sum strings [use ''.join(seq) instead]";
    public static final String CANT_TAKE_FLOOR_OR_MOD_OF_COMPLEX = "can't take floor or mod of complex number.";
    public static final String CAPI_SYM_NOT_CALLABLE = "C API symbol %s is not callable";
    public static final String CATCHING_CLS_NOT_ALLOWED = "catching classes that do not inherit from BaseException is not allowed";
    public static final String CHARACTER_MAPPING_MUST_BE_IN_RANGE = "character mapping must be in range(0x%s)";
    public static final String CHARACTER_MAPPING_MUST_RETURN_INT_NONE_OR_STR = "character mapping must return integer, None or str";
    public static final String CLASS_ASSIGNMENT_S_LAYOUT_DIFFERS_FROM_S = "__class__ assignment: '%s' object layout differs from '%s'";
    public static final String CLASS_ASSIGNMENT_ONLY_SUPPORTED_FOR_HEAP_TYPES_OR_MODTYPE_SUBCLASSES = "__class__ assignment only supported for heap types or ModuleType subclasses";
    public static final String CLASS_MUST_BE_SET_TO_CLASS = "__class__ must be set to a class, not '%p' object";
    public static final String MUST_BE_SET_TO_S_NOT_P = "%s must be set to a %s, not a '%p'";
    public static final String CLASSPATH_ARG_MUST_BE_STRING = "classpath argument %d must be string, not %p";
    public static final String CODE_OBJ_NO_FREE_VARIABLES = "code object passed to %s may not contain free variables";
    public static final String CODEC_SEARCH_MUST_RETURN_4 = "codec search functions must return 4-tuples";
    public static final String COMPILE_MUST_BE = "compile() mode must be 'exec', 'eval' or 'single'";
    public static final String COMPLEX_ARG_IS_MALFORMED_STR = "complex() arg is a malformed string";
    public static final String COMPLEX_CANT_TAKE_ARG = "complex() can't take second arg if first is a string";
    public static final String COMPLEX_EXPONENTIATION = "complex exponentiation";
    public static final String COMPLEX_ZERO_TO_NEGATIVE_POWER = "0.0 to a negative or complex power";
    public static final String COMPLEX_MODULO = "complex modulo";
    public static final String COMPLEX_RETURNED_NON_COMPLEX = "__complex__ returned non-complex (type %p)";
    public static final String CONSTRUCTOR_REQUIRES_A_SEQUENCE = "constructor requires a sequence";
    public static final String CONTIGUOUS_BUFFER = "contiguous buffer";
    public static final String CONVERTER_FUNC_FAILED_TO_SET_ERROR = "converter function failed to set an error on failure";
    public static final String CORRUPTED_CAPI_LIB_OBJ = "corrupted C API library object: %s";
    public static final String COULD_NOT_CONVERT_STRING_TO_COMPLEX = "could not convert string to complex: %s";
    public static final String COULD_NOT_CONVERT_STRING_TO_FLOAT = "could not convert string to float: %s";
    public static final String COUNT_FUNC_MATH = "count function in Math";
    public static final String COVERAGE_TRACKER_NOT_RUNNING = "coverage tracker not running";
    public static final String DEFAULT_EXCEPT_MUST_BE_LAST = "default 'except:' must be last";
    public static final String DESC_FOR_INDEX_S_FOR_S_DOESNT_APPLY_TO_P = "descriptor for index '%d' for %s doesn't apply to '%p' object";
    public static final String DESC_S_FOR_S_DOESNT_APPLY_TO_S = "descriptor '%s' for '%s' objects doesn't apply to '%s' object";
    public static final String DESCRIPTOR_REQUIRES_OBJ = "descriptor '%s' requires a '%s' object but received a '%p'";
    public static final String DESCRIPTOR_NEED_OBJ = "descriptor '%s' of '%s' object needs an argument";
    public static final String DICT_CHANGED_DURING_COMPARISON = "dictionary changed during comparison operation";
    public static final String CHANGED_SIZE_DURING_ITERATION = "%s changed size during iteration";
    public static final String DICT_MUST_BE_SET_TO_DICT = "__dict__ must be set to a dictionary, not a '%p'";
    public static final String DICT_OF_P_OBJECTS_HAS_NO_ATTR = "'%p' dict of '%p' object has no attribute '__setitem__'";
    public static final String DICT_UPDATE_SEQ_ELEM_HAS_LENGTH_2_REQUIRED = "dictionary update sequence element #%d has length %d; 2 is required";
    public static final String DIVISION_BY_ZERO = "division by zero";
    public static final String S_DIVISION_BY_ZERO = "%s division by zero";
    public static final String S_DIVISION_OR_MODULO_BY_ZERO = "%s division or modulo by zero";
    public static final String SUPER_NO_CLASS = "super(): no arguments";
    public static final String SUPER_EMPTY_CLASS = "super(): empty __class__ cell";
    public static final String EMPTY_SEPARATOR = "empty separator";
    public static final String EMPTY_ATTR_IN_FORMAT_STR = "Empty attribute in format string";
    public static final String S_MUST_BE_NONE_OR_STRING = "%s must be None or a string, not %p";
    public static final String ERROR_5_WHILE_DECOMPRESSING = "Error -5 while decompressing data: incomplete or truncated stream";
    public static final String ERROR_WRITING_FORKEXEC = "there was an error writing the fork_exec error to the error pipe";
    public static final String ERROR_CALLING_SET_NAME = "Error calling __set_name__ on '%p' instance '%s' in '%N'";
    public static final String ERRORS_WITHOUT_STR_ARG = "errors without a string argument";
    public static final String EXPORTS_CANNOT_RESIZE = "Existing exports of data: object cannot be re-sized";
    public static final String ESTAR_FORMAT_SPECIFIERS_NOT_ALLOWED = "'e*' format specifiers are not supported";
    public static final String EXCEPTION_CAUSE_MUST_BE_NONE_OR_DERIVE_FROM_BASE_EX = "exception cause must be None or derive from BaseException";
    public static final String EXCEPTION_CAUSES_MUST_DERIVE_FROM_BASE_EX = "exception causes must derive from BaseException";
    public static final String EXCEPTION_NOT_BASEEXCEPTION = "exception %s not a BaseException subclass";
    public static final String EXCEPTIONS_MUST_BE_CLASSES_OR_INSTANCES_DERIVING_FROM_BASE_EX = "exceptions must be classes or instances deriving from BaseException, not %p";
    public static final String EXCEPTIONS_MUST_DERIVE_FROM_BASE_EX = "exceptions must derive from BaseException";
    public static final String EXECV_ARG2_FIRST_ELEMENT_CANNOT_BE_EMPTY = "execv() arg 2 first element cannot be empty";
    public static final String EXPECTED_ARG_TYPES_S_S_BUT_NOT_P_P = "expected argument types (%s) or (%s) but not (%p, %p)";
    public static final String EXPECTED_AT_MOST_D_ARGS_GOT_D = "%s expected at most %d arguments, got %d";
    public static final String EXPECTED_BYTESLIKE_GOT_P = "expected a bytes-like object, %p found";
    public static final String EXPECTED_CHARACTER_BUT_STRING_FOUND = "%s expected a character, but string of length %d found";
    public static final String EXPECTED_CONVERSION = "expected conversion";
    public static final String EXPECTED_FSPATH_TO_RETURN_STR_OR_BYTES = "expected %p.__fspath__() to return str or bytes, not %p";
    public static final String EXPECTED_OBJ_TYPE_S_GOT_P = "expected object of type %s, got %p";
    public static final String EXPECTED_S_GOT_P = "expected %s, got %p";
    public static final String EXPECTED_S_NOT_P = "expected %s, not %p";
    public static final String EXPECTED_S_P_FOUND = "expected %s, %p found";
    public static final String EXPECTED_S_AFTER_FORMAT_CONVERSION = "expected %s after format specifier";
    public static final String EXPECTED_STR_BYTE_OSPATHLIKE_OBJ = "expected str, bytes or os.PathLike object, not %p";
    public static final String S_EXPECTED_STRING_OF_LEN_BUT_P = "%s expected string of length %s, but %p found";
    public static final String EXPECTED_UNICODE_CHAR_NOT_P = "expected a unicode character, not %p";
    public static final String EXPECTED_INT_AS_R = "Expected int as r";
    public static final String EXPONENT_TOO_LARGE = "exponent too large";
    public static final String FACTORIAL_NOT_DEFINED_FOR_NEGATIVE = "factorial() not defined for negative values";
    public static final String FD_IS_GREATER_THAN_MAXIMUM = "fd is greater than maximum";
    public static final String FD_IS_LESS_THAN_MINIMUM = "fd is less than minimum";
    public static final String FILE_NOT_OPENED_FOR_READING = "file not opened for reading";
    public static final String FILE_OR_STREAM_IS_NOT_READABLE = "File or stream is not readable.";
    public static final String FILE_OR_STREAM_IS_NOT_SEEKABLE = "File or stream is not seekable.";
    public static final String FILE_OR_STREAM_IS_NOT_WRITABLE = "File or stream is not writable.";
    public static final String FILE_DESCRIPTOR_OUT_OF_RANGE_IN_SELECT = "filedescriptor out of range in select()";
    public static final String FILL_CHAR_MUST_BE_LENGTH_1 = "The fill character must be exactly one character long";
    public static final String FILTER_SPEC_MUST_BE_DICT = "Filter specifier must be a dict or dict-like object";
    public static final String FILTER_SPECIFIER_MUST_HAVE = "Filter specifier must have an \"id\" entry";
    public static final String FIRST_ARG_MUST_BE_CALLABLE_S = "first argument must be callable %s";
    public static final String FIRST_ARG_MUST_BE_S_OR_TUPLE_NOT_P = "%s first arg must be %s or a tuple of str, not %p";
    public static final String FIRST_TWO_MAKETRANS_ARGS_MUST_HAVE_EQ_LENGTH = "the first two maketrans arguments must have equal length";
    public static final String S_FOR_ISLICE_MUST_BE = "% for islice() must be None or an integer: 0 <= x <= sys.maxsize.";
    public static final String FLOAT_ARG_REQUIRED = "float argument required, not %p";
    public static final String FOREIGN_INVOCATION_DOESNT_SUPPORT_KEYWORD_ARG = "foreign invocation does not support keyword arguments";
    public static final String FOREIGN_OBJ_HAS_NO_ATTR_S = "foreign object has no attribute '%s'";
    public static final String FOREIGN_OBJ_ISNT_ITERABLE = "foreign object is not iterable";
    public static final String FORMAT_REQUIRES_MAPPING = "format requires a mapping";
    public static final String FORMAT_STR_CONTAINS_POS_FIELDS = "Format string contains positional fields";
    public static final String FORMATED_S_TOO_LONG = "formatted %s is too long (precision too large?)";
    public static final String FREE_VAR_REFERENCED_BEFORE_ASSIGMENT = "free variable '%s' referenced before assignment in enclosing scope";
    public static final String FUNC_CONSTRUCTION_NOT_SUPPORTED = "function construction not supported for (%p, %p, %p, %p, %p, %p)";
    public static final String FUNC_TAKES_AT_LEAST_D_ARGS = "function takes at least %d arguments (%d given)";
    public static final String FUNC_TAKES_EXACTLY_D_ARGS = "function takes exaclty %d arguments (%d given)";
    public static final String FUNC_S_MUST_BE_S_NOT_P = "%s() %s must be %s, not %p";
    public static final String GENERATOR_EXPR_MUST_BE_PARENTHESIZED = "Generator expression must be parenthesized";
    public static final String GENERATOR_IGNORED_EXIT = "generator ignored GeneratorExit";
    public static final String GENERATOR_RAISED_STOPITER = "generator raised StopIteration";
    public static final String GENERATOR_ALREADY_EXECUTING = "generator already executing";
    public static final String GETATTR_ATTRIBUTE_NAME_MUST_BE_STRING = "getattr(): attribute name must be string";
    public static final String GETTING_THER_SOURCE_NOT_SUPPORTED_FOR_P = "getting the source is not supported for '%p'";
    public static final String GLOBALS_MUST_BE_DICT = "%s() globals must be a dict, not %p";
    public static final String GOT_MULTIPLE_VALUES_FOR_ARG = "%s() got multiple values for keyword argument '%s'";
    public static final String GOT_SOME_POS_ONLY_ARGS_PASSED_AS_KEYWORD = "%s() got some positional-only arguments passed as keyword arguments: '%s'";
    public static final String GOT_UNEXPECTED_KEYWORD_ARG = "%s() got an unexpected keyword argument '%s'";
    public static final String HANDLER_MUST_BE_CALLABLE = "handler must be callable";
    public static final String HAS_NO_ATTR = "%s has no attribute %s";
    public static final String P_HAS_NO_ATTRS_S_TO_ASSIGN = "'%p' object has no attributes (assign to .%s)";
    public static final String P_HAS_NO_ATTRS_S_TO_DELETE = "'%p' object has no attributes (del .%s)";
    public static final String P_HAS_RO_ATTRS_S_TO_ASSIGN = "'%p' object has only read-only attributes (assign to .%s)";
    public static final String P_HAS_RO_ATTRS_S_TO_DELETE = "'%p' object has only read-only attributes (del .%s)";
    public static final String HASH_MISMATCH = "hash mismatch: known hash is different to computed hash";
    public static final String HASH_SHOULD_RETURN_INTEGER = "__hash__ method should return an integer";
    public static final String HEX_VALUE_TOO_LARGE_AS_FLOAT = "hexadecimal value too large to represent as a float";
    public static final String HOST_ACCESS_NOT_ALLOWED = "host access is not allowed";
    public static final String HOST_LOOKUP_NOT_ALLOWED = "host lookup is not allowed";
    public static final String HOST_SYM_NOT_DEFINED = "host symbol %s is not defined or access has been denied";
    public static final String IDN_ENC_FAILED = "IDN encoding failed: %s";
    public static final String IF_YOU_GIVE_ONLY_ONE_ARG_TO_DICT = "if you give only one argument to maketrans it must be a dict";
    public static final String INVALID_INDEXING_OF_0_DIM_MEMORY = "invalid indexing of 0-dim memory";
    public static final String ILLEGAL_ENVIRONMENT_VARIABLE_NAME = "illegal environment variable name";
    public static final String ILLEGAL_EXPRESSION_FOR_AUGMENTED_ASSIGNEMNT = "illegal expression for augmented assignment";
    public static final String ILLEGAL_IP_STRING_PASSED_TO = "illegal IP address string passed to %s";
    public static final String ILLEGAL_SOCKET_ADDR_ARG = "%s: illegal sockaddr argument";
    public static final String S_ILLEGAL_TIME_TUPLE_ARG = "%s: illegal time tuple argument";
    public static final String IMPORT_STAR_ONLY_ALLOWED_AT_MODULE_LEVEL = "import * only allowed at module level";
    public static final String INCOMPLETE_FORMAT = "incomplete format";
    public static final String INDEX_NOT_INT = "%s: index not int";
    public static final String INDEX_OUT_OF_BOUNDS = "index out of bounds";
    public static final String INDEX_OUT_OF_BOUNDS_ON_DIMENSION_D = "index out of bounds on dimension %d";
    public static final String INDEX_OUT_OF_RANGE = "index out of range";
    public static final String INDEX_RETURNED_NON_INT = "__index__ returned non-int (type %p)";
    public static final String INPUT_TOO_LONG = "input too long";
    public static final String INSTANCE_EX_MAY_NOT_HAVE_SEP_VALUE = "instance exception may not have a separate value";
    public static final String INSTANCE_HAS_NO_ATTR_S = "%s instance has no attribute '%s'";
    public static final String INT_CANT_CONVERT_STRING_WITH_EXPL_BASE = "int() can't convert non-string with explicit base";
    public static final String INT_TOO_LARGE_TO_CONVERT_TO_FLOAT = "int too large to convert to float";
    public static final String INTEGER_DIVISION_BY_ZERO = "ZeroDivisionError: integer division or modulo by zero";
    public static final String INTEGER_DIVISION_RESULT_TOO_LARGE = "integer division result too large for a float";
    public static final String S_EXPECTED_GOT_P = "%s argument expected, got %p";
    public static final String REC_LIMIT_GREATER_THAN_1 = "recursion limit must be greater or equal than 1";
    public static final String INTEGER_GREATER_THAN_MAX = "integer is greater than maximum";
    public static final String INTEGER_REQUIRED = "an integer is required";
    public static final String INTEGER_REQUIRED_GOT = "an integer is required (got type %p)";
    public static final String INTERMEDIATE_OVERFLOW_IN = "intermediate overflow in %s";
    public static final String INVALD_OR_UNREADABLE_CLASSPATH = "invalid or unreadable classpath: '%s' - %m";
    public static final String INVALID_ARGS = "%s: invalid arguments";
    public static final String INVALID_ARGS_FOR_ALLOCFUNC = "invalid arguments for allocfunc (expected 2 but got %s)";
    public static final String INVALID_ARGS_FOR_FASTCALL_METHOD = "invalid arguments for fastcall method (expected 3 but got %s)";
    public static final String INVALID_ARGS_FOR_FASTCALL_W_KEYWORDS_METHOD = "invalid arguments for fastcall_with_keywords method (expected 4 but got %s)";
    public static final String INVALID_ARGS_FOR_METHOD = "invalid arguments for method (expected 3 but got %s)";
    public static final String INVALID_BASE_TYPE_OBJ_FOR_CLASS = "Invalid base type object for class %s (base type was '%p' object).";
    public static final String INVALID_CAPI_FUNC = "invalid C API function: %s";
    public static final String INVALID_CONTAINER_FORMAT = "Invalid container format: %d";
    public static final String INVALID_CONVERSION = "invalid conversion";
    public static final String INVALID_ESCAPE_AT = "invalid %s escape at position %d";
    public static final String INVALID_ESCAPE_SEQ_AT = "invalid escape sequence '\\%s' at position %d";
    public static final String INVALID_FILTER = "Invalid filter ID: %d";
    public static final String INVALID_FILTER_CHAIN_FOR_FORMAT = "Invalid filter chain for FORMAT_ALONE - must be a single LZMA1 filter";
    public static final String INVALID_INDEX_S = "invalid index %s";
    public static final String INVALID_INPUT_ELEM_TYPE = "Invalid input element type '%p'";
    public static final String INVALID_INSTANTIATION_OF_FOREIGN_OBJ = "invalid instantiation of foreign object";
    public static final String INVALID_ITEM_RETURNED_FROM_NATIVE_SEQ = "Invalid item type %s returned from native sequence storage (expected: %s)";
    public static final String INVALID_LITERAL_FOR_INT_WITH_BASE = "invalid literal for int() with base %s: %s";
    public static final String INVALID_LOCALE_CATEGORY = "invalid locale category";
    public static final String INVALID_MRO_OBJ = "invalid mro object";
    public static final String INVALID_NORMALIZATION_FORM = "invalid normalization form";
    public static final String INVALID_NUMBER_OF_ARGUMENTS = "%s: invalid number of arguments";
    public static final String INVALID_OBJ_FROM_NATIVE = "invalid object from native: %s";
    public static final String INVALID_OPTIMIZE_VALUE = "compile(): invalid optimize value";
    public static final String INVALID_PARAMS = "invalid parameters";
    public static final String INVALID_PTR_OBJ = "invalid pointer object: %s";
    public static final String INVALID_SYNTAX = "invalid syntax";
    public static final String INVALID_USE_OF_W_FORMAT_CHAR = "invalid use of 'w' format character";
    public static final String INVALID_BUFFER_ACCESS = "invalid buffer access";
    public static final String ISLICE_WRONG_ARGS = "islice(seq, stop) or islice(seq, start, stop[, step])";
    public static final String IS_EMPTY = "%s is empty";
    public static final String IS_NOT_A = "%s is not a %s";
    public static final String IS_NOT_A_CONTAINER = "%p is not a container";
    public static final String IS_NOT_A_DICTIONARY = "%s is not a dictionary";
    public static final String IS_NOT_IN_RANGE = "%s is not in range";
    public static final String IS_NOT_A_UNICODE_OBJECT = "%s is not a unicode object";
    public static final String IS_NOT_A_SEQUENCE = "%p is not a sequence";
    public static final String IS_NOT_TEXT_ENCODING = "'%s' is not a text encoding; use %s to handle arbitrary codecs";
    public static final String SHOULD_RETURN_TYPE_A_NOT_TYPE_B = "%s should return a %s, not %p";
    public static final String MUST_BE_TYPE_A_NOT_TYPE_B = "%s must be a %s, not %p";
    public static final String SHOULD_RETURN_A_NOT_B = "%s should return a %s, not %s";
    public static final String SLOTNAMES_SHOULD_BE_A_NOT_B = "%p.__slotnames__ should be a %s, not %p";
    public static final String COPYREG_SLOTNAMES = "copyreg._slotnames didn't return a list or None";
    public static final String D_IS_NOT_IN_RANGE = "%d is not in range";
    public static final String INIT_TAKES_ONE_ARG = "%N.__init__() takes exactly one argument (the instance to initialize)";
    public static final String INIT_TAKES_ONE_ARG_OBJECT = "object.__init__() takes exactly one argument (the instance to initialize)";
    public static final String INVALID_VALUE_NAN = "Invalid value NaN (not a number)";
    public static final String IS_NOT_SUBTYPE_OF = "%s.__new__(%N): %N is not a subtype of %s";
    public static final String IS_NOT_TYPE_OBJ = "%s is not a type object (%p)";
    public static final String ISINSTANCE_ARG_2_MUST_BE_TYPE_OR_TUPLE_OF_TYPE = "isinstance() arg 2 must be a type or tuple of types (was: %s)";
    public static final String ISSUBCLASS_MUST_BE_CLASS_OR_TUPLE = "issubclass() arg 2 must be a class or tuple of classes";
    public static final String ITER_V_MUST_BE_CALLABLE = "iter(v, w): v must be callable";
    public static final String KEYWORD_NAMES_MUST_BE_STR_GOT_P = "keyword names must be str, get %p";
    public static final String KEYWORDS_S_MUST_BE_STRINGS = "%s() keywords must be strings";
    public static final String KEYWORDS_MUST_BE_STRINGS = "keywords must be strings";
    public static final String KLASS_ARG_IS_NOT_HOST_OBJ = "klass argument '%p' is not a host object";
    public static final String LAZY_INITIALIZATION_FAILED = "lazy initialization of type %s failed";
    public static final String LEFT_BRACKET_WO_RIGHT_BRACKET_IN_ARG = "')' without '(' in argument parsing";
    public static final String LEN_OF_UNSIZED_OBJECT = "len() of unsized object";
    public static final String LEN_SHOULD_RETURN_GT_ZERO = "__len__() should return >= 0";
    public static final String LENGTH_HINT_SHOULD_RETURN_MT_ZERO = "__length_hint__() should return >= 0";
    public static final String LIST_ASSIGMENT_INDEX_OUT_OF_RANGE = "list assignment index out of range";
    public static final String LIST_CANNOT_BE_CONVERTED_TO_DICT = "list cannot be converted to dict";
    public static final String LIST_INDEX_OUT_OF_RANGE = "list index out of range";
    public static final String LIST_LENGTH_OUT_OF_RANGE = "list length out of range";
    public static final String LOCAL_VAR_REFERENCED_BEFORE_ASSIGMENT = "local variable '%s' referenced before assignment";
    public static final String LOCALS_MUST_BE_MAPPING = "%s() locals must be a mapping or None, not %p";
    public static final String LOST_SYSBREAKPOINTHOOK = "lost sys.breakpointhook";
    public static final String LOST_SYSDISPLAYHOOK = "lost sys.displayhook";
    public static final String LOST_SYSSTDOUT = "lost sys.stdout";
    public static final String LENGTH_SHOULD_NOT_BE_NEG = "length should not be negative";
    public static final String MATH_DOMAIN_ERROR = "math domain error";
    public static final String MATH_RANGE_ERROR = "math range error";
    public static final String MAX_MARSHAL_STACK_DEPTH = "Maximum marshal stack depth";
    public static final String MEMORYVIEW_INVALID_SLICE_KEY = "memoryview: invalid slice key";
    public static final String MEMORYVIEW_A_BYTES_LIKE_OBJECT_REQUIRED_NOT_P = "memoryview: a bytes-like object is required, not '%p'";
    public static final String MEMORYVIEW_INVALID_VALUE_FOR_FORMAT_S = "memoryview: invalid value for format '%s'";
    public static final String MEMORYVIEW_SLICE_ASSIGNMENT_RESTRICTED_TO_DIM_1 = "memoryview slice assignments are currently restricted to ndim = 1";
    public static final String MEMORYVIEW_DIFFERENT_STRUCTURES = "memoryview assignment: lvalue and rvalue have different structures";
    public static final String MEMORYVIEW_FORBIDDEN_RELEASED = "operation forbidden on released memoryview object";
    public static final String MEMORYVIEW_DESTINATION_FORMAT_ERROR = "memoryview: destination format must be a native single character format prefixed with an optional '@'";
    public static final String MEMORYVIEW_CANNOT_CAST_NON_BYTE = "memoryview: cannot cast between two non-byte formats";
    public static final String MEMORYVIEW_LENGTH_NOT_MULTIPLE_OF_ITEMSIZE = "memoryview: length is not a multiple of itemsize";
    public static final String MEMORYVIEW_CAST_MUST_BE_1D_TO_ND_OR_ND_TO_1D = "memoryview: cast must be 1D -> ND or ND -> 1D";
    public static final String MEMORYVIEW_NUMBER_OF_DIMENSIONS_MUST_NOT_EXCEED_D = "memoryview: number of dimensions must not exceed %d";
    public static final String MEMORYVIEW_CASTS_RESTRICTED_TO_C_CONTIGUOUS = "memoryview: casts are restricted to C-contiguous views";
    public static final String MEMORYVIEW_CANNOT_CAST_VIEW_WITH_ZEROS_IN_SHAPE_OR_STRIDES = "memoryview: cannot cast view with zeros in shape or strides";
    public static final String MEMORYVIEW_CAST_WRONG_LENGTH = "memoryview: product(shape) * itemsize != buffer size";
    public static final String MEMORYVIEW_CAST_ELEMENTS_MUST_BE_POSITIVE_INTEGERS = "memoryview.cast(): elements of shape must be integers > 0";
    public static final String MEMORYVIEW_HAS_D_EXPORTED_BUFFERS = "memoryview has %d exported buffers";
    public static final String MEMORYVIEW_FORMAT_S_NOT_SUPPORTED = "memoryview: format %s not supported";
    public static final String METACLASS_CONFLICT = "metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases";
    public static final String METHOD_NAME_MUST_BE = "method name must be string, not %p";
    public static final String MISSING_D_REQUIRED_S_ARGUMENT_S_POS = "%s() missing required argument '%s' (pos %d)";
    public static final String MISSING_D_REQUIRED_S_ARGUMENT_S_S = "%s() missing %d required %s argument%s: '%s'";
    public static final String MISSING_S = "Missing %s";
    public static final String MMAP_INDEX_OUT_OF_RANGE = "mmap index out of range";
    public static final String MODULE_HAS_NO_ATTR_S = "module has no attribute '%s'";
    public static final String MODULE_S_HAS_NO = "module '%s' has no %s";
    public static final String MODULE_PARTIALLY_INITIALIZED_S_HAS_NO_ATTR_S = "partially initialized module '%s' has no attribute '%s' (most likely due to a circular import)";
    public static final String MODULE_S_HAS_NO_ATTR_S = "module '%s' has no attribute '%s'";
    public static final String MULTI_DIMENSIONAL_SUB_VIEWS_NOT_IMPLEMENTED = "multi-dimensional sub-views are not implemented";
    public static final String MULTIPLE_BASES_LAYOUT_CONFLICT = "multiple bases have instance lay-out conflict";
    public static final String MUST_BE = "%s: '%s' must be %s";
    public static final String MUST_BE_A_CELL = "%s must be a cell";
    public static final String MUST_BE_BYTE_STRING_LEGTH1_NOT_P = "must be a byte string of length 1, not %p";
    public static final String MUST_BE_EITHER_OR = "%s: '%s' must be either %s or %s";
    public static final String MUST_BE_INTEGER = "%s must be an integer";
    public static final String MUST_BE_INTEGER_QUOTED_ATTR = "\"%s\" must be an integer";
    public static final String MUST_BE_INTEGER_NOT_P = "%s must be an integer, not %p";
    public static final String MUST_BE_MODULE_CLASS = "%s: %s must be module.class";
    public static final String MUST_BE_NON_NEGATIVE = "%s must be non-negative";
    public static final String MUST_BE_NON_NEGATIVE_INTEGER = "%s must be non-negative integer";
    public static final String MUST_BE_NUMERIC = "must be numeric, not %p";
    public static final String MUST_BE_REAL_NUMBER = "must be real number, not %p";
    public static final String MUST_BE_STR_NOT_P = "must be str, not %p";
    public static final String MUST_BE_S_NOT_P = "%s must be a %s, not %p";
    public static final String MUST_BE_S_OR_S = "%s must be %s or %s";
    public static final String MUST_BE_SET_TO_S_OBJ = "%s must be set to a %s object";
    public static final String MUST_BE_STRING = "%s must be a string";
    public static final String MUST_BE_STRING_QUOTED = "\"%s\" must be a string";
    public static final String MUST_BE_STRINGS = "%s must be strings";
    public static final String MUST_BE_STRINGS_NOT_P = "%s must be strings, not %p";
    public static final String MUST_BE_TUPLE_OF_CLASSES_NOT_P = "%s.%s must be tuple of classes, not '%p'";
    public static final String MUST_RETURN_2TUPLE = "%p.__divmod__() must return a 2-tuple, not %p";
    public static final String S_MUST_RETURN_TUPLE = "%s must return a tuple (object, integer)";
    public static final String MUST_S_ITER_RETURN_2TUPLE = "%s iterator must return 2-tuples";
    public static final String S_MUST_RETURN_S_NOT_P = "%s must return a %s, not %p";
    public static final String S_MUST_RETURN_S_OR_S = "%s must return a %s or %s";
    public static final String MUTATED_DURING_UPDATE = "%s mutated during update";
    public static final String NAME_IS_USED_BEFORE_GLOBAL = "name '%s' is used prior to global declaration";
    public static final String NAME_IS_ASSIGNED_BEFORE_GLOBAL = "name '%s' is assigned to before global declaration";
    public static final String NAME_IS_ASSIGNED_BEFORE_NONLOCAL = "name '%s' is assigned to before nonlocal declaration";
    public static final String NAME_NOT_DEFINED = "name '%s' is not defined";
    public static final String NAMELESS_MODULE = "nameless module";
    public static final String NATIVE_S_SUBTYPES_NOT_IMPLEMENTED = "native %s subtypes not implemented";
    public static final String NEED_BYTELIKE_OBJ = "decoding to str: need a bytes-like object, %p found";
    public static final String DECODING_STR_NOT_SUPPORTED = "decoding str is not supported";
    public static final String S_NEEDS_S_AS_FIRST_ARG = "%s() needs %s as first arg";
    public static final String NEG_INF_PLUS_INF_IN = "-inf + inf in fsum";
    public static final String NEGATIVE_COUNT = "negative count";
    public static final String NEGATIVE_DATA_SIZE = "negative data size";
    public static final String NEGATIVE_SHIFT_COUNT = "negative shift count";
    public static final String NEW_TAKES_ONE_ARG = "object.__new__() takes exactly one argument (the type to instantiate)";
    public static final String NEW_TAKES_NO_ARGS = "%N() takes no arguments";
    public static final String NO_ACTIVE_EX_TO_RERAISE = "No active exception to reraise";
    public static final String NO_ARGS = "%s: no arguments";
    public static final String NO_BINDING_FOR_NON_LOCAL = "no binding for nonlocal variable \"%s\" found";
    public static final String NO_CACHED_CODE = "no cached code for %s";
    public static final String NO_CURRENT_FRAME = "%s: no current frame";
    public static final String NO_FUNCTION_FOUND = "no function %s%s found in %s";
    public static final String NO_SUCH_FILE_OR_DIR = "No such file or directory: '%s:/%s'";
    public static final String NO_SUCH_NAME = "no such name";
    public static final String NONEMPTY_SLOTS_NOT_ALLOWED_FOR_SUBTYPE_OF_S = "nonempty __slots__ not supported for subtype of '%s'";
    public static final String NONLOCAL_AND_GLOBAL = "name '%s' is nonlocal and global";
    public static final String NONLOCAL_AT_MODULE_LEVEL = "nonlocal declaration not allowed at module level";
    public static final String NON_HEX_DIGIT_FOUND = "Non-hexadecimal digit found";
    public static final String NOT_A_ZIP_FILE = "not a Zip file: '%s'";
    public static final String NOT_ALL_ARGS_CONVERTED_DURING_FORMATTING = "not all arguments converted during %s formatting";
    public static final String NOT_ENOUGH_ARGS_FOR_FORMAT_STRING = "not enough arguments for format string";
    public static final String NOT_ENOUGH_VALUES_TO_UNPACK = "not enough values to unpack (expected %d, got %d)";
    public static final String NOT_SUPPORTED_BETWEEN_INSTANCES = "'%s' not supported between instances of '%p' and '%p'";
    public static final String NUMBER_IS_REQUIRED = "a number is required";
    public static final String NUMBER_S_CANNOT_FIT_INTO_INDEXSIZED_INT = "number %s cannot fit into index-sized integer";
    public static final String OBJ_INDEX_MUST_BE_INT_OR_SLICES = "%s indices must be integers or slices, not %p";
    public static final String OBJ_CANNOT_BE_INTERPRETED_AS_INTEGER = "'%p' object cannot be interpreted as an int";
    public static final String OBJ_DOES_NOT_SUPPORT_INDEXING = "'%p' object does not support indexing";
    public static final String OBJ_DOES_NOT_SUPPORT_ITEM_ASSIGMENT = "'%s' object does not support item assignment";
    public static final String P_OBJ_DOES_NOT_SUPPORT_ITEM_ASSIGMENT = "'%p' object does not support item assignment";
    public static final String OBJ_CANT_BE_REPEATED = "'%p' object can't be repeated";
    public static final String OBJ_CANT_BE_CONCATENATED = "'%p' object can't be concatenated";
    public static final String OBJ_DOESNT_SUPPORT_DELETION = "'%p' object doesn't support item deletion";
    public static final String OBJ_HAS_NO_LEN = "object of type '%p' has no len()";
    public static final String OBJ_IS_UNSLICEABLE = "'%p' object is unsliceable";
    public static final String OBJ_ISNT_CALLABLE = "'%p' object is not callable";
    public static final String OBJ_ISNT_ITERATOR = "'%p' object is not an iterator";
    public static final String OBJ_ISNT_MAPPING = "'%p' object is not a mapping";
    public static final String OBJ_ISNT_REVERSIBLE = "'%p' object is not reversible";
    public static final String OBJ_NOT_ITERABLE = "'%p' object is not iterable";
    public static final String OBJ_NOT_SUBSCRIPTABLE = "'%p' object is not subscriptable";
    public static final String OBJ_OR_KLASS_ARGS_IS_NOT_HOST_OBJ = "the object '%p' or klass '%p' arguments is not a host object";
    public static final String OBJ_P_HAS_NO_ATTR_S = "'%p' object has no attribute '%s'";
    public static final String OBJ_S_HAS_NO_ATTR_S = "'%s' object has no attribute '%s'";
    public static final String OBJ_IS_NOT_WRITABLE = "Object is not writable.";
    public static final String ODD_LENGTH_STRING = "Odd-length string";
    public static final String ONLY_ACCEPTS_INTEGRAL_VALUES = "%s only accepts integral values";
    public static final String ONLY_DEFLATED_ALLOWED_AS_METHOD = "only DEFLATED (%d) allowed as method, got %d";
    public static final String ONLY_S_AND_S_AMY_FOLLOW_S = "Only %s and %s may follow %s";
    public static final String ORDER_MUST_BE_C_F_OR_A = "order must be 'C', 'F' or 'A'";
    public static final String PATH_SHOULD_BE_STR_BYTES_PATHLIKE_NOT_P = "path should be string, bytes, or os.PathLike, not %p";
    public static final String PACKED_IP_WRONG_LENGTH = "packed IP wrong length for %s";
    public static final String PACKET_IP_WRONG_LENGTH_FOR = "packed IP wrong length for %s";
    public static final String PATCHED_DATETIME_CLASS = "patched datetime class: %r";
    public static final String POLYGLOT_ACCESS_NOT_ALLOWED = "polyglot access is not allowed";
    public static final String POLYGLOT_EVAL_MUST_PASS_STRINGS = "polyglot.eval must pass strings as either 'path' or a 'string' keyword";
    public static final String POLYGLOT_EVAL_WITH_STRING_MUST_PASS_LANG = "polyglot.eval with a string argument must pass a language or mime-type";
    public static final String POP_FROM_EMPTY_SET = "pop from an emtpy set";
    public static final String POP_INDEX_OUT_OF_RANGE = "pop index out of range";
    public static final String PORT_PROTO_NOT_FOUND = "port/proto not found";
    public static final String PRIVATE_IDENTIFIER_TOO_LARGE_TO_BE_MANGLED = "private identifier too large to be mangled";
    public static final String PROVIDED_OBJ_NOT_ARRAY = "provided object is not an array";
    public static final String PYTHON_INT_TOO_LARGE_TO_CONV_TO = "Python int too large to convert to %s";
    public static final String PYTHON_INT_TOO_LARGE_TO_CONV_TO_C_TYPE = "Python int too large to convert to %s-byte C type";
    public static final String RANGE_OUT_OF_BOUNDS = "range index out of range";
    public static final String READ_BYTE_OUT_OF_RANGE = "read byte out of range";
    public static final String READ_ONLY_BYTELIKE_OBJ = "read-only bytes-like object";
    public static final String READ_WRITE_BYTELIKE_OBJ = "read-write bytes-like object";
    public static final String READONLY_ATTRIBUTE = "readonly attribute";
    public static final String RECURSION_DEPTH_EXCEEDED = "Recursion depth exceeded";
    public static final String REPLACEMENT_INDEX_S_OUT_OF_RANGE = "Replacement index %s out of range for positional args tuple";
    public static final String REQUIRES_CODE_OBJ = "%s() requires a code object with %d free vars, not %d";
    public static final String REQUIRES_INT_OR_CHAR = "%%%c requires int or char";
    public static final String ROUNDED_VALUE_TOO_LARGE = "rounded value too large to represent";
    public static final String S_FORMAT_NUMBER_IS_REQUIRED_NOT_S = "%%%s format: a number is required, not %p";
    public static final String S_FORMAT_INTEGER_IS_REQUIRED_NOT_S = "%%%s format: an integer is required, not %p";
    public static final String C_ARG_NOT_IN_RANGE256_DECIMAL = "%%c arg not in range(256)";
    public static final String C_REQUIRES_INT_IN_BYTE_RANGE_OR_SINGLE_BYTE = "%%c requires an integer in range(256) or a single byte";
    public static final String REQUIRES_OBJ_THAT_IMPLEMENTS_S = " %%r requires an object that implements %s";
    public static final String REQUIRES_STRING_AS_LEFT_OPERAND = "'in <string>' requires string as left operand, not %P";
    public static final String REQUIRES_STR_OBJECT_BUT_RECEIVED_P = "'%s' requires a 'str' object but received a '%p'";
    public static final String RETURN_OUTSIDE_FUNC = "'return' outside function";
    public static final String S_RETURNED_BASE_WITH_UNSUITABLE_LAYOUT = "%s returned base with unsuitable layout ('%p')";
    public static final String RETURNED_NON_FLOAT = "%p.%s returned non-float (type %p)";
    public static final String RETURNED_NON_INT = "%s returned non-int (type %p)";
    public static final String S_RETURNED_NON_CLASS = "%s returned a non-class ('%p')";
    public static final String RETURNED_NON_INTEGER = "%s returned a non-integer";
    public static final String RETURNED_NON_INTEGRAL = "%s returned non-Integral (type %p)";
    public static final String RETURNED_NON_LONG = "%p.%s returned a non long (type %p)";
    public static final String RETURNED_NON_STRING = "%s returned non-string (type %p)";
    public static final String P_S_RETURNED_NON_STRING = "%p.%s returned non-string (type %p)";
    public static final String RETURNED_NONBYTES = "%s returned non-bytes (type %p)";
    public static final String RETURNED_NONITER = "iter() returned non-iterator of type %p";
    public static final String RETURNED_NULL_WO_SETTING_ERROR = "%s returned NULL without setting an error";
    public static final String RETURNED_RESULT_WITH_ERROR_SET = "%s returned a result with an error set";
    public static final String RETURNED_UNEXPECTE_RET_CODE_EXPECTED_INT_BUT_WAS_S = "%s returned an unexpected return code; expected 'int' but was %s";
    public static final String EMBEDDED_NULL_CHARACTER = "embedded null character";
    public static final String S_EMBEDDED_NULL_CHARACTER_IN_S = "%sembedded null character in %s";
    public static final String S_MUST_BE_S = "%s must be %s";
    public static final String S_NOT_SUPPORTED = "%s not supported";
    public static final String S_S_SHOULD_BE_S_NOT_P = "%s%s should be %s, not %p";
    public static final String S_S_CONFLICTS_WITH_CLASS_VARIABLE = "'%s' in %s conflicts with class variable";
    public static final String S_SHOULD_BE_ASCII_OR_BYTELIKE = "%s should be an ASCII string or a bytes-like object";
    public static final String S_FLOWINFO_RANGE = "%s(): flowinfo must be 0-1048575.";
    public static final String S_PORT_RANGE = "%s(): port must be 0-65535.";
    public static final String SECURITY_EX_WHILE_READING = "security exception while reading: '%s'";
    public static final String SEEK_OUT_OF_RANGE = "seek out of range";
    public static final String SEMAPHORE_NAME_TAKEN = "Semaphore name taken: '%s'";
    public static final String SEP_MUST_BE_NONE_OR_STRING = "sep must be None or a string, not %p";
    public static final String SEP_MUST_BE_STR_OR_BYTES = "sep must be str or bytes.";
    public static final String SEP_MUST_BE_LENGTH_1 = "sep must be length 1.";
    public static final String SEP_MUST_BE_ASCII = "sep must be ASCII.";
    public static final String SET_DOES_NOT_SUPPORT_ITERABLE_OBJ = "set does not support iterable object %s";
    public static final String SHOULD_RETURN = "%s should return %s";
    public static final String SHOULD_RETURN_NONE = "%s should return None";
    public static final String SIGNAL_MUST_BE_SIGIGN_SIGDFL_OR_CALLABLE_OBJ = "signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object";
    public static final String SIGNED_INT_GREATER_THAN_MAX = "signed integer is greater than maximum";
    public static final String SIGNED_INT_LESS_THAN_MIN = "signed integer is less than minimum";
    public static final String SIGNED_SHORT_INT_GREATER_THAN_MAX = "signed short integer is greater than maximum";
    public static final String SIGNED_SHORT_INT_LESS_THAN_MIN = "signed short integer is less than minimum";
    public static final String SINGLE_S = "Single %s";
    public static final String SIZE_MUST_BE_D_OR_S = "size must be %d or %s";
    public static final String SLICE_INDICES_MUST_BE_INT_NONE_HAVE_INDEX = "slice indices must be integers or None or have an __index__ method";
    public static final String SLICE_STEP_CANNOT_BE_ZERO = "slice step cannot be zero";
    public static final String SWITCHING_FROM_AUTOMATIC_TO_MANUAL_NUMBERING = "switching from automatic to manual numbering";
    public static final String SWITCHING_FROM_MANUAL_TO_AUTOMATIC_NUMBERING = "switching from manual to automatic numbering";
    public static final String SRC_CODE_CANNOT_CONTAIN_NULL_BYTES = "source code string cannot contain null bytes";
    public static final String DICT_SLOT_DISALLOWED_WE_GOT_ONE = "__dict__ slot disallowed: we already got one";
    public static final String WEAKREF_SLOT_DISALLOWED_WE_GOT_ONE = "__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0";
    public static final String STAR_WANTS_INT = "* wants int";
    public static final String TOO_MANY_DECIMAL_DIGITS_IN_FORMAT_STRING = "Too many decimal digits in format string";
    public static final String SLOTS_MUST_BE_IDENTIFIERS = "__slots__ must be identifiers";
    public static final String STARRED_ASSIGMENT_MUST_BE_IN_LIST_OR_TUPLE = "starred assignment target must be in a list or tuple";
    public static final String STATE_IS_NOT_A_DICT = "state is not a dictionary";
    public static final String STATE_VECTOR_INVALID = "state vector invalid.";
    public static final String STATE_VECTOR_MUST_BE_A_TUPLE = "state vector must be a tuple";
    public static final String STEP_1_NOT_SUPPORTED = "step != 1 not supported";
    public static final String STEP_FOR_ISLICE_MUST_BE = "Step for islice() must be a positive integer or None.";
    public static final String STRING_ARG_WO_ENCODING = "string argument without an encoding";
    public static final String ENCODING_ARG_WO_STRING = "encoding without a string argument";
    public static final String ENCODING_ERROR_WITH_CODE = "decoding error; unknown error handling code: %s";
    public static final String S_SHOULD_BE_A_VALID_FILESYSTEMPATH = "%s should be a valid filesystem path";
    public static final String SERVICE_PROTO_NOT_FOUND = "service/proto not found";
    public static final String SIZE_SHOULD_NOT_BE_NEGATIVE = "size should not be negative";
    public static final String STRING_INDEX_OUT_OF_RANGE = "IndexError: string index out of range";
    public static final String SUBSTRING_NOT_FOUND = "substring not found";
    public static final String SUBSECTION_NOT_FOUND = "subsection not found";
    public static final String SUB_VIEWS_NOT_IMPLEMENTED = "sub-views are not implemented";
    public static final String SUPER_OBJ_MUST_BE_INST_SUB_OR_TYPE = "super(type, obj): obj must be an instance or subtype of type";
    public static final String TAKES_A_DICT_AS_SECOND_ARG_IF_ANY = "%s() takes a dict as second arg, if any";
    public static final String TAKES_A_D_SEQUENCE = "%s() takes a %d-sequence (%d-sequence given)";
    public static final String TAKES_AN_AT_LEAST_D_SEQUENCE = "%s() takes an at least %d-sequence (%d-sequence given)";
    public static final String TAKES_AN_AT_MOST_D_SEQUENCE = "%s() takes an at most %d-sequence (%d-sequence given)";
    public static final String TAKES_D_OR_D_ARGS = "%s takes %d or %d arguments";
    public static final String TAKES_D_POS_ARG_S_BUT_D_POS_ARG_S = "%s() takes %d positional argument%s but %d positional argument%s (and %d keyword-only argument%s) were given%s";
    public static final String TAKES_D_POS_ARG_S_BUT_GIVEN_S = "%s() takes %d positional argument%s but %d %s given%s";
    public static final String TAKES_FROM_D_TO_D_POS_ARG_S_BUT_D_POS_ARG_S = "%s() takes from %d to %d positional argument%s but %d positional argument%s (and %d keyword-only argument%s) were given%s";
    public static final String TAKES_FROM_D_TO_D_POS_ARG_S_BUT_D_S_GIVEN_S = "%s() takes from %d to %d positional argument%s but %d %s given%s";
    public static final String TAKES_EXACTLY_D_ARGUMENTS_D_GIVEN = "%s() takes exactly %d arguments (%d given)";
    public static final String TAKES_EXACTLY_S_ARGUMENTS_D_GIVEN = "%s() takes exactly %s arguments (%d given)";
    public static final String S_TAKES_NO_KEYWORD_ARGS = "%s takes no keyword arguments";
    public static final String P_TAKES_NO_KEYWORD_ARGS = "%p takes no keyword arguments";
    public static final String THROW_THIRD_ARG_MUST_BE_TRACEBACK = "throw() third argument must be a traceback object";
    public static final String TDATAOBJECT_SHOULD_NOT_HAVE_MORE_LINKS = "_tee_dataobject should not have more than %s links";
    public static final String TDATAOBJECT_SHOULDNT_HAVE_NEXT = "_tee_dataobject shouldn't have a next if not full";
    public static final String SWITCH_INTERVAL_MUST_BE_POSITIVE = "switch interval must be strictly positive";
    public static final String TIMED_OUT = "timed out";
    public static final String TIMEOUT_VALUE_MUST_BE_POSITIVE = "timeout value must be positive";
    public static final String TIMEOUT_VALUE_OUT_OF_RANGE = "Timeout value out of range";
    public static final String TIMEOUT_VALUE_TOO_LARGE = "timeout value is too large";
    public static final String TIMESTAMP_OUT_OF_RANGE = "timestamp out of range for platform time_t";
    public static final String TOLERANCE_MUST_NON_NEGATIVE = "tolerances must be non-negative";
    public static final String TOO_LARGE_TO_CONVERT_TO = "%s too large to convert to %s";
    public static final String TOO_LARGE_TO_CONVERT = "%s too big to convert";
    public static final String TOO_MANY_ARG = "%s: too many arguments";
    public static final String TOO_MANY_VALUES_TO_UNPACK = "too many values to unpack (expected %d)";
    public static final String TRAILING_S_IN_STR = "Trailing %s in string";
    public static final String TRANS_TABLE_MUST_BE_256 = "translation table must be 256 characters long";
    public static final String TUPLE_ASSIGN_OUT_OF_BOUNDS = "tuple assignment index out of range";
    public static final String TUPLE_OUT_OF_BOUNDS = "tuple index out of range";
    public static final String TUPLE_OR_STRUCT_TIME_ARG_REQUIRED = "Tuple or struct_time argument required";
    public static final String TYPE_DOES_NOT_PROVIDE_BASES = "type does not provide bases";
    public static final String TYPE_DOESNT_DEFINE_METHOD = "type %p doesn't define %s method";
    public static final String TYPE_IS_NOT_ACCEPTABLE_BASE_TYPE = "type '%N' is not an acceptable base type";
    public static final String TYPE_NAME_NO_NULL_CHARS = "type name must not contain null characters";
    public static final String TYPE_P_NOT_SUPPORTED_BY_FOREIGN_OBJ = "type '%p' is not supported by the foreign object";
    public static final String TYPE_DOESNT_SUPPORT_MRO_ENTRY_RESOLUTION = "type() doesn't support MRO entry resolution; use types.new_class()";
    public static final String TYPE_DOESNT_DEFINE_FORMAT = "Type %p doesn't define __format__";
    public static final String UNABLE_TO_GET_S = "unable to get %";
    public static final String UNAVAILABLE_ON_THIS_PLATFORM = "%s: %s unavailable on this platform";
    public static final String UNAVAILABLE_ON_THIS_PLATFORM_NO_FUNC = "%s unavailable on this platform";
    public static final String UNEXPECTED_KEYWORD_ARGS = "%s: unexpected keyword arguments";
    public static final String UNEXPECTED_S_IN_FIELD_NAME = "unexpected %s in field name";
    public static final String UNHASHABLE_TYPE_P = "unhashable type: '%p'";
    public static final String UNHASHABLE_TYPE = "unhashable type";
    public static final String UNINITIALIZED_S_OBJECT = "uninitialized classmethod object";
    public static final String UNKNOWN_ADDR_FAMILY = "unknown address family %d";
    public static final String UNKNOWN_ATTR = "Unknown attribute: '%s'";
    public static final String UNKNOWN_ENCODING = "unknown encoding %s";
    public static final String UNKNOWN_ERROR_HANDLER = "unknown error handler name '%s'";
    public static final String UNKNOWN_FORMAT_CODE = "Unknown format code '%c' for object of type '%s'";
    public static final String UNKNOWN_S_TYPE = "unknown %s type";
    public static final String UNMATCHED_S = "Unmatched %s";
    public static final String UNRECOGNIZED_FLAGS = "compile(): unrecognised flags";
    public static final String UNRECOGNIZED_FORMAT_CHAR = "unrecognized format char in arguments parsing: %c";
    public static final String UNRECOGNIZED_KIND = "unrecognized kind";
    public static final String UNSIGNED_BYTE_INT_GREATER_THAN_MAX = "unsigned byte integer is greater than maximum";
    public static final String UNSIGNED_BYTE_INT_LESS_THAN_MIN = "unsigned byte integer is less than minimum";
    public static final String UNSUPPORTED_FORMAT_CHAR_AT_INDEX = "unsupported format character '%c' (0x%x) at index %d";
    public static final String UNSUPPORTED_INSTANCEOF = "unsupported instanceof(%p, %p)";
    public static final String UNSUPPORTED_LOCALE_SETTING = "unsupported locale setting";
    public static final String UNSUPPORTED_OBJ_IN = "unsupported object in '%s'";
    public static final String UNSUPPORTED_OPERAND_P = "unsupported operand '%p'";
    public static final String UNSUPPORTED_OPERAND_TYPES_FOR_S_P_AND_P = "unsupported operand type(s) for %s: '%p' and '%p'";
    public static final String UNSUPPORTED_OPERAND_TYPES_FOR_S_P_AND_P_PRINT = UNSUPPORTED_OPERAND_TYPES_FOR_S_P_AND_P + ". Did you mean \"print(<message>, file=<output_stream>)\"?";
    public static final String UNSUPPORTED_OPERAND_TYPES_FOR_S_P_P_P = "unsupported operand type(s) for %s(): '%p', '%p', '%p'";
    public static final String UNSUPPORTED_OPERAND_TYPES_FOR_S_PR_S_P_AND_P = "unsupported operand type(s) for %s or %s(): '%p' and '%p'";
    public static final String UNSUPPORTED_SIZE_WAS = "unsupported %s size; was: %d";
    public static final String UNSUPPORTED_STR_TYPE = "unsupported string type: %s";
    public static final String UNSUPPORTED_TARGET_SIZE = "Unsupported target size: %d";
    public static final String UNSUPPORTED_USE_OF_SYS_EXECUTABLE = "internal error: unsupported use of sys.executable";
    public static final String UTIME_CANNOT_USE_DIR_FD_AND_FOLLOW_SYMLINKS = "utime: cannot use dir_fd and follow_symlinks together on this platform";
    public static final String VALUE_TOO_LARGE_TO_FIT_INTO_INDEX = "value too large to fit into index-sized integer";
    public static final String WAS_NOT_POSSIBLE_TO_MARSHAL = "Was not possible to marshal";
    public static final String WAS_NOT_POSSIBLE_TO_MARSHAL_P = "Was not possible to marshal %p";
    public static final String WEAK_OBJ_GONE_AWAY = "weak object has gone away";
    public static final String WRITABLE_CONTIGUES_FOR_NON_CONTIGUOUS = "writable contiguous buffer requested for a non-contiguous object";
    public static final String WRITEOBJ_WITH_NULL_FILE = "writeobject with NULL file";
    public static final String X_NOT_IN_LIST = "x not in list";
    public static final String X_NOT_IN_TUPLE = "tuple.index(x): x not in tuple";
    public static final String S_IS_AN_INVALID_ARG_FOR_S = "'%s' is an invalid keyword argument for %s";
    public static final String YOU_MAY_SPECIFY_EITHER_OR_BUT_NOT_BOTH = "%s: you may specify either '%s' or '%s' but not both";
    public static final String ZIPIMPORT_CANNOT_REWAD_ARCH_MEMBERS = "zipimport: cannot read archive members large than 2GB";
    public static final String ZIPIMPORT_CANT_READ_DATA = "zipimport: can't read data";
    public static final String ZIPIMPORT_WRONG_CACHED_FILE_POS = "zipimport: wrong cached file position";
    public static final String ACCESS_TO_INTERNAL_LANG_NOT_PERMITTED = "access to internal language %s is not permitted";
    public static final String POW_BASE_NOT_INVERTIBLE = "base is not invertible for the given modulus";
    public static final String POW_ZERO_CANNOT_RAISE_TO_NEGATIVE_POWER = "0.0 cannot be raised to a negative power";
    public static final String S_ALIGNMENT_FLAG_NOT_ALLOWED_FOR_COMPLEX_FMT = "'%c' alignment flag is not allowed in complex format specifier";
    public static final String EQUALS_ALIGNMENT_FLAG_NOT_ALLOWED_FOR_STRING_FMT = "'=' alignment not allowed in string format specifier";
    public static final String SIGN_NOT_ALLOWED_FOR_STRING_FMT = "Sign not allowed in string format specifier";
    public static final String ZERO_PADDING_NOT_ALLOWED_FOR_COMPLEX_FMT = "Zero padding is not allowed in complex format specifier";
    public static final String POW_THIRD_ARG_CANNOT_BE_ZERO = "pow() 3rd argument cannot be 0";
    public static final String CANNOT_ENCODE_CLASSNAME = "'utf-8' codec can't encode class name '%s'";
    public static final String CANNOT_ENCODE_DOCSTR = "'utf-8' codec can't encode docstring '%s'";
    public static final String PRECISION_NOT_ALLOWED_FOR_INT = "Precision not allowed in integer format specifier";
    public static final String SIGN_NOT_ALLOWED_WITH_C_FOR_INT = "Sign not allowed with integer format specifier 'c'";
    public static final String ALTERNATE_NOT_ALLOWED_WITH_C_FOR_INT = "Alternate form (#) not allowed with integer format specifier 'c'";
    public static final String ALTERNATE_NOT_ALLOWED_WITH_STRING_FMT = "Alternate form (#) not allowed in string format specifier";
    public static final String CAPI_LOAD_ERROR = "Could not load C API from %s.";
    public static final String NATIVE_ACCESS_NOT_ALLOWED = "Cannot run any C extensions because native access is not allowed.";
    public static final String HPY_LOAD_ERROR = "Could not load HPy C API from %s.";
    public static final String CANNOT_CONVERT_NEGATIVE_VALUE_TO_UNSIGNED_INT = "can't convert negative value to unsigned int";
    public static final String SEND_NON_NONE_TO_UNSTARTED_GENERATOR = "can't send non-None value to a just-started generator";
    public static final String UNSUPPORTED_FORMAT_STRING_PASSED_TO_P_FORMAT = "unsupported format string passed to %p.__format__";
    public static final String ONLY_SINGLE_TARGET_CAN_BE_ANNOTATED = "only single target (not %s) can be annotated";
    public static final String ILLEGAL_TARGET_FOR_ANNOTATION = "illegal target for annotation";
    public static final String SLICE_INDICES_TYPE_ERROR = "slice indices must be integers or have an __index__ method";
    public static final String UNMAPPABLE_CHARACTER = "unmappable character";
    public static final String MALFORMED_INPUT = "malformed input";
    public static final String SHOULD_HAVE_RETURNED_EXCEPTION = "calling %N should have returned an instance of BaseException, not %p";
    public static final String STRING_KEYS_MUST_BE_LENGTH_1 = "string keys in translate table must be of length 1";
    public static final String KEYS_IN_TRANSLATE_TABLE_MUST_BE_STRINGS_OR_INTEGERS = "keys in translate table must be strings or integers";
    public static final String EMBEDDED_NULL_BYTE = "embedded null byte";
    public static final String CANNOT_INTERN_P = "can't intern %p";
    public static final String METHOD_REQUIRES_A_BYTES_OBJECT_GOT_P = "Method requires a 'bytes' object, got '%p'";
    public static final String FIRST_ARG_MUST_BE_BYTES_OR_A_TUPLE_OF_BYTES_NOT_P = "first arg must be bytes or a tuple of bytes, not %p";
    public static final String A_BYTES_LIKE_OBJECT_IS_REQUIRED_NOT_P = "a bytes-like object is required, not '%p'";
    public static final String TYPE_S_TAKES_AT_LEAST_ONE_ARGUMENT = "type '%s' takes at least one argument";
    public static final String S_TAKES_AT_LEAST_D_ARGUMENTS_D_GIVEN = "%s() takes at least %d arguments (%d given)";
    public static final String S_TAKES_AT_MOST_D_ARGUMENTS_D_GIVEN = "%s() takes at most %d arguments (%d given)";
    public static final String RES_O_O_RANGE = "%s result out of range";
    public static final String FLOAT_TO_LARGE_TO_PACK_WITH_S_FMT = "float too large to pack with %s format";

    // SSL errors
    public static final String SSL_SESSION_CLOSED = "SSL/TLS session closed cleanly.";
    public static final String SSL_PEM_LIB = "[SSL] PEM lib";
    public static final String X509_PEM_LIB = "[X509] PEM lib";
    public static final String NO_CIPHER_CAN_BE_SELECTED = "No cipher can be selected.";
    public static final String HANDSHAKE_NOT_DONE_YET = "handshake not done yet";
    public static final String S_CHANNEL_BINDING_NOT_IMPLEMENTED = "'%s' channel binding type not implemented";
    public static final String SSL_WANT_READ = "The operation did not complete (read)";
    public static final String SSL_WANT_WRITE = "The operation did not complete (write)";
    public static final String SSL_ERROR_EOF = "EOF occurred in violation of protocol";
    public static final String SSL_PEM_NO_START_LINE = "[PEM: NO_START_LINE] no start line";
    public static final String CA_FILE_PATH_DATA_CANNOT_BE_ALL_OMMITED = "cafile, capath and cadata cannot be all omitted";
    public static final String EMPTY_CERTIFICATE_DATA = "Empty certificate data";
    public static final String NOT_ENOUGH_DATA = "not enough data";
    public static final String KEY_VALUES_MISMATCH = "[X509: KEY_VALUES_MISMATCH] key values mismatch";
    public static final String BAD_BASE64_DECODE = "[PEM: BAD_BASE64_DECODE] bad base64 decode";
    public static final String NO_CERTIFICATE_OR_CRL_FOUND = "[X509: NO_CERTIFICATE_OR_CRL_FOUND] no certificate or crl found";
    public static final String CERTIFICATE_VERIFY_FAILED = "[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: %s";
    public static final String CONTEXT_DOESNT_SUPPORT_MIN_MAX = "The context's protocol doesn't support modification of highest and lowest version.";
    public static final String UNSUPPORTED_PROTOCOL_VERSION = "Unsupported protocol version 0x%x";
    public static final String CANNOT_SET_VERIFY_MODE_TO_CERT_NONE = "Cannot set verify_mode to CERT_NONE when check_hostname is enabled.";
    public static final String INVALID_OR_UNSUPPORTED_PROTOCOL_VERSION = "invalid or unsupported protocol version: %s";
    public static final String INVALID_VALUE_FOR_VERIFY_MODE = "invalid value for verify_mode";

    // mmap
    public static final String MEM_MAPPED_LENGTH_MUST_BE_POSITIVE = "memory mapped length must be positive";
    public static final String MEM_MAPPED_OFFSET_MUST_BE_POSITIVE = "memory mapped offset must be positive";
    public static final String MEM_MAPPED_OFFSET_INVALID_ACCESS = "mmap invalid access parameter.";
    public static final String MMAP_CHANGED_LENGTH = "The mmapped file has changed its length";
    public static final String CANNOT_MMAP_AN_EMPTY_FILE = "cannot mmap an empty file";
    public static final String MMAP_S_IS_GREATER_THAN_FILE_SIZE = "mmap %s is greater than file size";
    public static final String TOO_MANY_REMAINING_BYTES_TO_BE_STORED = "There are too many remaining bytes to be stored in a bytes object.";
    public static final String MMAP_CANNOT_MODIFY_READONLY_MEMORY = "mmap can't modify a readonly memory map.";
    public static final String DATA_OUT_OF_RANGE = "data out of range";

    // zlib errors
    public static final String WHILE_FLUSHING = "while flushing";
    public static final String WHILE_S_DATA = "while %s data";
    public static final String WHILE_FINISHING_S = "while finishing %s";
    public static final String WHILE_SETTING_ZDICT = "while setting zdict";
    public static final String WHILE_CREATING_S_OBJECT = "while creating %s object";
    public static final String INVALID_INITIALIZATION_OPTION = "Invalid initialization option";
    public static final String CANT_ALLOCATE_MEMORY_FOR_S_OBJECT = "Can't allocate memory for %s object";
    public static final String OUT_OF_MEMORY_WHILE_S_DATA = "Out of memory while %s data";
    public static final String WHILE_PREPARING_TO_S_DATA = "while preparing to %s data";
    public static final String INVALID_DICTIONARY = "Invalid dictionary";
    public static final String WHILE_COPYING_S_OBJECT = "while copying %s object";
    public static final String INCONSISTENT_STREAM_STATE = "Inconsistent stream state";
    public static final String INVALID_INPUT_DATA = "invalid input data";
    public static final String INCOMPLETE_OR_TRUNCATED_STREAM = "incomplete or truncated stream";
    public static final String S_MUST_BE_GREATER_THAN_ZERO = "%s must be greater than zero";

    // bz2 errors
    public static final String REPEATED_CALL_TO_FLUSH = "Repeated call to flush()";
    public static final String COMPRESSOR_HAS_BEEN_FLUSHED = "Compressor has been flushed";
    public static final String COMPRESSLEVEL_MUST_BE_BETWEEN_1_AND_9 = "compresslevel must be between 1 and 9";
    public static final String END_OF_STREAM_ALREADY_REACHED = "End of stream already reached";
    public static final String INVALID_PARAMETERS_PASSED_TO_LIBBZIP2 = "Internal error - invalid parameters passed to libbzip2";
    public static final String INVALID_DATA_STREAM = "Invalid data stream";
    public static final String UNKNOWN_IO_ERROR = "Unknown I/O error";
    public static final String COMPRESSED_FILE_ENDED_BEFORE_EOS = "Compressed file ended before the logical end-of-stream was detected";
    public static final String INVALID_SEQUENCE_OF_COMMANDS = "Internal error - Invalid sequence of commands sent to libbzip2";
    public static final String LIBBZIP2_WAS_NOT_COMPILED_CORRECTLY = "libbzip2 was not compiled correctly";
    public static final String UNRECOGNIZED_ERROR_FROM_LIBBZIP2_D = "Unrecognized error from libbzip2: %d";

    // lzma errors
    public static final String ALREADY_AT_END_OF_STREAM = "Already at end of stream";
    public static final String INVALID_COMPRESSION_PRESET = "Invalid compression preset: %d";
    public static final String MUST_SPECIFY_FILTERS = "Must specify filters for FORMAT_RAW";
    public static final String CANNOT_SPECIFY_FILTERS = "Cannot specify filters except with FORMAT_RAW";
    public static final String CANNOT_SPECIFY_MEM_LIMIT = "Cannot specify memory limit with FORMAT_RAW";
    public static final String INTEGRITY_CHECKS_ONLY_SUPPORTED_BY = "Integrity checks are only supported by FORMAT_XZ";
    public static final String CANNOT_SPECIFY_PREST_AND_FILTER_CHAIN = "Cannot specify both preset and filter chain";

    // io errors
    public static final String IO_S_INVALID_LENGTH = "raw %s returned invalid length %d (should have been between 0 and %d)";
    public static final String IO_S_SHOULD_RETURN_BYTES = "%s should return bytes";
    public static final String CANNOT_FIT_P_IN_OFFSET_SIZE = "cannot fit '%p' into an offset-sized integer";
    public static final String IO_STREAM_INVALID_POS = "Raw stream returned invalid position %d";
    public static final String IO_STREAM_DETACHED = "raw stream has been detached";
    public static final String IO_UNINIT = "I/O operation on uninitialized object";
    public static final String DETACHED_BUFFER = "underlying buffer has been detached";
    public static final String UNSUPPORTED_WHENCE = "whence value %d unsupported";
    public static final String IO_CLOSED = "I/O operation on closed file.";
    public static final String MUST_BE_NON_NEG_OR_NEG_1 = "read length must be non-negative or -1";
    public static final String BUF_SIZE_POS = "buffer size must be strictly positive";
    public static final String S_SHOULD_RETURN_BYTES = "%s should return bytes";
    public static final String S_RETURNED_TOO_MUCH_DATA = "%s returned too much data: %d bytes requested, %d returned";
    public static final String S_SHOULD_RETURN_BYTES_NOT_P = " should have returned a bytes object, not '%p'";
    public static final String BAD_MODE = "Must have exactly one of create/read/write/append mode and at most one plus";
    public static final String CANNOT_USE_CLOSEFD = "Cannot use closefd=False with file name";
    public static final String EXPECTED_INT_FROM_OPENER = "expected integer from opener";
    public static final String OPENER_RETURNED_D = "opener returned %d";
    public static final String FILE_NOT_OPEN_FOR_S = "File not open for %s";
    public static final String UNBOUNDED_READ_RETURNED_MORE_BYTES = "unbounded read returned more bytes than a Python bytes object can hold";
    public static final String INVALID_MODE_S = "invalid mode: %s";
    public static final String S_OF_CLOSED_FILE = "%s of closed file";
    public static final String S_TO_CLOSED_FILE = "%s to closed file";
    public static final String NOT_POSSIBLE_TO_SET_THE_ENCODING_OR = "It is not possible to set the encoding or newline of stream after the first read";
    public static final String NOT_WRITABLE = "not writable";
    public static final String ENCODER_SHOULD_RETURN_A_BYTES_OBJECT_NOT_P = "encoder should return a bytes object, not %p";
    public static final String NOT_READABLE = "not readable";
    public static final String UNDERLYING_STREAM_IS_NOT_SEEKABLE = "underlying stream is not seekable";
    public static final String CAN_T_DO_NONZERO_CUR_RELATIVE_SEEKS = "can't do nonzero cur-relative seeks";
    public static final String CAN_T_DO_NONZERO_END_RELATIVE_SEEKS = "can't do nonzero end-relative seeks";
    public static final String INVALID_WHENCE_D_SHOULD_BE_D_D_OR_D = "invalid whence (%d, should be %d, %d or %d)";
    public static final String NEGATIVE_SEEK_POSITION_D = "negative seek position %d";
    public static final String UNDERLYING_READ_SHOULD_HAVE_RETURNED_A_BYTES_OBJECT_NOT_S = "underlying read() should have returned a bytes object, not '%s'";
    public static final String S_SHOULD_HAVE_RETURNED_A_STR_OBJECT_NOT_P = "%s() should have returned a str object, not '%p'";
    public static final String CAN_T_RESTORE_LOGICAL_FILE_POSITION = "can't restore logical file position";
    public static final String TELLING_POSITION_DISABLED_BY_NEXT_CALL = "telling position disabled by next() call";
    public static final String DECODER_SHOULD_RETURN_A_STRING_RESULT_NOT_P = "decoder should return a string result, not %p";
    public static final String CAN_T_RECONSTRUCT_LOGICAL_FILE_POSITION = "can't reconstruct logical file position";
    public static final String ILLEGAL_DECODER_STATE = "illegal decoder state";
    public static final String ILLEGAL_DECODER_STATE_THE_FIRST = "illegal decoder state: the first item should be a bytes object, not '%p'";
    public static final String A_STRICTLY_POSITIVE_INTEGER_IS_REQUIRED = "a strictly positive integer is required";
    public static final String NEW_POSITION_TOO_LARGE = "new position too large";
    public static final String NEGATIVE_SIZE_VALUE_D = "negative size value %d";
    public static final String INVALID_WHENCE_D_SHOULD_BE_0_1_OR_2 = "invalid whence (%d, should be 0, 1 or 2)";
    public static final String NEGATIVE_SEEK_VALUE_D = "negative seek value %d";
    public static final String THIRD_ITEM_OF_STATE_MUST_BE_AN_INTEGER_GOT_P = "third item of state must be an integer, got %p";
    public static final String POSITION_VALUE_CANNOT_BE_NEGATIVE = "position value cannot be negative";
    public static final String THIRD_ITEM_OF_STATE_SHOULD_BE_A_DICT_GOT_A_P = "third item of state should be a dict, got a %p";
    public static final String P_SETSTATE_ARGUMENT_SHOULD_BE_D_TUPLE_GOT_P = "%p.__setstate__ argument should be %d-tuple, got %p";
    public static final String ILLEGAL_NEWLINE_VALUE_S = "illegal newline value: %s";
    public static final String S_SHOULD_HAVE_RETURNED_A_BYTES_LIKE_OBJECT_NOT_P = "underlying %s() should have returned a bytes-like object, not '%p'";
    public static final String COULD_NOT_DETERMINE_DEFAULT_ENCODING = "could not determine default encoding";
    public static final String INVALID_BUFFERING_SIZE = "invalid buffering size";
    public static final String UNKNOWN_MODE_S = "unknown mode: '%s'";
    public static final String CAN_T_HAVE_TEXT_AND_BINARY_MODE_AT_ONCE = "can't have text and binary mode at once";
    public static final String MODE_U_CANNOT_BE_COMBINED_WITH_X_W_A_OR = "mode U cannot be combined with 'x', 'w', 'a', or '+'";
    public static final String MUST_HAVE_EXACTLY_ONE_OF_CREATE_READ_WRITE_APPEND_MODE = "must have exactly one of create/read/write/append mode";
    public static final String BINARY_MODE_DOESN_T_TAKE_AN_S_ARGUMENT = "binary mode doesn't take an %s argument";
    public static final String CAN_T_HAVE_UNBUFFERED_TEXT_IO = "can't have unbuffered text I/O";
    public static final String ILLEGAL_STATE_ARGUMENT = "illegal state argument";
    public static final String STATE_ARGUMENT_MUST_BE_A_TUPLE = "state argument must be a tuple";
    public static final String STATE_ARGUMENT_D_MUST_BE_A_S = "state argument %d must be a %s";
    public static final String REENTRANT_CALL_INSIDE_S_REPR = "reentrant call inside %s.__repr__";
    public static final String EXISTING_EXPORTS_OF_DATA_OBJECT_CANNOT_BE_RE_SIZED = "Existing exports of data: object cannot be re-sized";
    public static final String SECOND_ITEM_OF_STATE_MUST_BE_AN_INTEGER_NOT_P = "second item of state must be an integer, not %p";
    public static final String WRITE_COULD_NOT_COMPLETE_WITHOUT_BLOCKING = "write could not complete without blocking";
    public static final String THE_S_OBJECT_IS_BEING_GARBAGE_COLLECTED = "the %s object is being garbage-collected";
    public static final String SHUTDOWN_POSSIBLY_DUE_TO_DAEMON_THREADS = "could not acquire lock for %s at interpreter shutdown, possibly due to daemon threads";
    public static final String REENTRANT_CALL_INSIDE_P = "reentrant call inside %p";
    public static final String DEQUE_MUTATED_DURING_ITERATION = "deque mutated during iteration";
    public static final String DEQUE_INDEX_OUT_OF_RANGE = "deque index out of range";
    public static final String CAN_ONLY_CONCATENATE_DEQUE_NOT_P_TO_DEQUE = "can only concatenate deque (not \"%p\") to deque";
    public static final String MULTI_PHASE_INIT_OF_EXTENSION_MODULE_S = "multi-phase init of extension module %s";
    public static final String INIT_S_RETURNED_AN_UNEXPECTED_VALUE = "HPyInit_%s returned an unexpected value (expected a Python module).";

    // ctypes
    public static final String PACK_MUST_BE_A_NON_NEGATIVE_INTEGER = "_pack_ must be a non-negative integer";
    public static final String FIELDS_MUST_BE_A_SEQUENCE_OF_PAIRS = "'_fields_' must be a sequence of pairs";
    public static final String FIELDS_IS_FINAL = "_fields_ is final";
    public static final String SECOND_ITEM_IN_FIELDS_TUPLE_INDEX_D_MUST_BE_A_C_TYPE = "second item in _fields_ tuple (index %d) must be a C type";
    public static final String BIT_FIELDS_NOT_ALLOWED_FOR_TYPE_S = "bit fields not allowed for type %s";
    public static final String NUMBER_OF_BITS_INVALID_FOR_BIT_FIELD = "number of bits invalid for bit field";
    public static final String STRUCTURE_OR_UNION_CANNOT_CONTAIN_ITSELF = "Structure or union cannot contain itself";
    public static final String FIELDS_MUST_BE_A_SEQUENCE_OF_NAME_C_TYPE_PAIRS = "'_fields_' must be a sequence of (name, C type) pairs";
    public static final String INTEGER_EXPECTED = "integer expected";
    public static final String UNDERLYING_BUFFER_IS_NOT_WRITABLE = "underlying buffer is not writable";
    public static final String UNDERLYING_BUFFER_IS_NOT_C_CONTIGUOUS = "underlying buffer is not C contiguous";
    public static final String OFFSET_CANNOT_BE_NEGATIVE = "offset cannot be negative";
    public static final String BUFFER_SIZE_TOO_SMALL_D_INSTEAD_OF_AT_LEAST_D_BYTES = "Buffer size too small (%d instead of at least %d bytes)";
    public static final String THE_HANDLE_ATTRIBUTE_OF_THE_SECOND_ARGUMENT_MUST_BE_AN_INTEGER = "the _handle attribute of the second argument must be an integer";
    public static final String EXPECTED_S_INSTANCE_GOT_S = "expected %s instance, got %s";
    public static final String INCOMPATIBLE_TYPES_S_INSTANCE_INSTEAD_OF_S_INSTANCE = "incompatible types, %s instance instead of %s instance";
    public static final String CTYPES_OBJECT_STRUCTURE_TOO_DEEP = "ctypes object structure too deep";
    public static final String NOT_A_CTYPE_INSTANCE = "not a ctype instance";
    public static final String EXPECTED_S_INSTANCE_INSTEAD_OF_S = "expected %s instance instead of %s";
    public static final String ARRAY_LENGTH_MUST_BE_0_NOT_D = "Array length must be >= 0, not %d";
    public static final String EXPECTED_A_TYPE_OBJECT = "Expected a type object";
    public static final String CANT_SET_ATTRIBUTE = "can't set attribute";
    public static final String CANT_DELETE_ATTRIBUTE = "can't delete attribute";
    public static final String HAS_NO_STGINFO = "has no _stginfo_";
    public static final String DON_T_KNOW_HOW_TO_CONVERT_PARAMETER_D = "Don't know how to convert parameter %d";
    public static final String MUST_BE_A_CTYPES_TYPE = "must be a ctypes type";
    public static final String NOT_A_CTYPES_TYPE_OR_OBJECT = "not a ctypes type or object";
    public static final String EXCEPTED_CTYPES_INSTANCE = "excepted ctypes instance";
    public static final String MINIMUM_SIZE_IS_D = "minimum size is %d";
    public static final String MEMORY_CANNOT_BE_RESIZED_BECAUSE_THIS_OBJECT_DOESN_T_OWN_IT = "Memory cannot be resized because this object doesn't own it";
    public static final String COULD_NOT_CONVERT_THE_HANDLE_ATTRIBUTE_TO_A_POINTER = "could not convert the _handle attribute to a pointer";
    public static final String NO_ALIGNMENT_INFO = "no alignment info";
    public static final String THIS_TYPE_HAS_NO_SIZE = "this type has no size";
    public static final String BYREF_ARGUMENT_MUST_BE_A_CTYPES_INSTANCE_NOT_S = "byref() argument must be a ctypes instance, not '%s'";
    public static final String INVALID_TYPE = "invalid type";
    public static final String TOO_MANY_ARGUMENTS_D_MAXIMUM_IS_D = "too many arguments (%d), maximum is %d";
    public static final String ARGUMENT_D = "argument %d: ";
    public static final String FFI_CALL_FAILED = "ffi_call failed";
    public static final String FFI_PREP_CIF_FAILED = "ffi_prep_cif failed";
    public static final String NO_FFI_TYPE_FOR_RESULT = "No ffi_type for result";
    public static final String INT_TOO_LONG_TO_CONVERT = "int too long to convert";
    public static final String CAST_ARGUMENT_2_MUST_BE_A_POINTER_TYPE_NOT_S = "cast() argument 2 must be a pointer type, not %s";
    public static final String WRONG_TYPE = "wrong type";
    public static final String INVALID_INDEX = "invalid index";
    public static final String INDICES_MUST_BE_INTEGERS = "indices must be integers";
    public static final String CAN_ONLY_ASSIGN_SEQUENCE_OF_SAME_SIZE = "Can only assign sequence of same size";
    public static final String ARRAY_DOES_NOT_SUPPORT_ITEM_DELETION = "Array does not support item deletion";
    public static final String INDICES_MUST_BE_INTEGER = "indices must be integer";
    public static final String CLASS_MUST_DEFINE_A_LENGTH_ATTRIBUTE = "class must define a '_length_' attribute";
    public static final String THE_LENGTH_ATTRIBUTE_IS_TOO_LARGE = "The '_length_' attribute is too large";
    public static final String THE_LENGTH_ATTRIBUTE_MUST_BE_AN_INTEGER = "The '_length_' attribute must be an integer";
    public static final String THE_LENGTH_ATTRIBUTE_MUST_NOT_BE_NEGATIVE = "The '_length_' attribute must not be negative";
    public static final String CLASS_MUST_DEFINE_A_TYPE_ATTRIBUTE = "class must define a '_type_' attribute";
    public static final String TYPE_MUST_HAVE_STORAGE_INFO = "_type_ must have storage info";
    public static final String ARRAY_TOO_LARGE = "array too large";
    public static final String OUT_PARAMETER_D_MUST_BE_A_POINTER_TYPE_NOT_S = "'out' parameter %d must be a pointer type, not %s";
    public static final String ARGUMENT_MUST_BE_CALLABLE_OR_INTEGER_FUNCTION_ADDRESS = "argument must be callable or integer function address";
    public static final String CANNOT_CONSTRUCT_INSTANCE_OF_THIS_CLASS_NO_ARGTYPES = "cannot construct instance of this class: no argtypes";
    public static final String INVALID_RESULT_TYPE_FOR_CALLBACK_FUNCTION = "invalid result type for callback function";
    public static final String FFI_PREP_CIF_FAILED_WITH_D = "ffi_prep_cif failed with %d";
    public static final String FFI_PREP_CLOSURE_FAILED_WITH_D = "ffi_prep_closure failed with %d";
    public static final String THE_ERRCHECK_ATTRIBUTE_MUST_BE_CALLABLE = "the errcheck attribute must be callable";
    public static final String RESTYPE_MUST_BE_A_TYPE_A_CALLABLE_OR_NONE = "restype must be a type, a callable, or None";
    public static final String THIS_FUNCTION_TAKES_AT_LEAST_D_ARGUMENT_S_D_GIVEN = "this function takes at least %d argument%s (%d given)";
    public static final String THIS_FUNCTION_TAKES_D_ARGUMENT_S_D_GIVEN = "this function takes %d argument%s (%d given)";
    public static final String REQUIRED_ARGUMENT_S_MISSING = "required argument '%s' missing";
    public static final String NOT_ENOUGH_ARGUMENTS = "not enough arguments";
    public static final String NO_POSITIONAL_ARGUMENTS_EXPECTED = "no positional arguments expected";
    public static final String NULL_STGDICT_UNEXPECTED = "NULL stgdict unexpected";
    public static final String S_OUT_PARAMETER_MUST_BE_PASSED_AS_DEFAULT_VALUE = "%s 'out' parameter must be passed as default value";
    public static final String PARAMFLAG_D_NOT_YET_IMPLEMENTED = "paramflag %d not yet implemented";
    public static final String CALL_TAKES_EXACTLY_D_ARGUMENTS_D_GIVEN = "call takes exactly %d arguments (%d given)";
    public static final String PARAMFLAGS_MUST_BE_A_TUPLE_OR_NONE = "paramflags must be a tuple or None";
    public static final String PARAMFLAGS_MUST_HAVE_THE_SAME_LENGTH_AS_ARGTYPES = "paramflags must have the same length as argtypes";
    public static final String PARAMFLAGS_MUST_BE_A_SEQUENCE_OF_INT_STRING_VALUE_TUPLES = "paramflags must be a sequence of (int [,string [,value]]) tuples";
    public static final String PARAMFLAG_VALUE_D_NOT_SUPPORTED = "paramflag value %d not supported";
    public static final String CLASS_MUST_DEFINE_FLAGS_WHICH_MUST_BE_AN_INTEGER = "class must define _flags_ which must be an integer";
    public static final String ARGTYPES_MUST_BE_A_SEQUENCE_OF_TYPES = "_argtypes_ must be a sequence of types";
    public static final String RESTYPE_MUST_BE_A_TYPE_A_CALLABLE_OR_NONE1 = "_restype_ must be a type, a callable, or None";
    public static final String ITEM_D_IN_ARGTYPES_HAS_NO_FROM_PARAM_METHOD = "item %d in _argtypes_ has no from_param method";
    public static final String POINTER_DOES_NOT_SUPPORT_ITEM_DELETION = "Pointer does not support item deletion";
    public static final String EXPECTED_S_INSTEAD_OF_S = "expected %s instead of %s";
    public static final String CANNOT_CREATE_INSTANCE_HAS_NO_TYPE = "Cannot create instance: has no _type_";
    public static final String NULL_POINTER_ACCESS = "NULL pointer access";
    public static final String SLICE_START_IS_REQUIRED_FOR_STEP_0 = "slice start is required for step < 0";
    public static final String SLICE_STOP_IS_REQUIRED = "slice stop is required";
    public static final String POINTER_INDICES_MUST_BE_INTEGER = "Pointer indices must be integer";
    public static final String TYPE_MUST_BE_A_TYPE = "_type_ must be a type";
    public static final String EXPECTED_CDATA_INSTANCE = "expected CData instance";
    public static final String CLASS_MUST_DEFINE_A_TYPE_STRING_ATTRIBUTE = "class must define a '_type_' string attribute";
    public static final String A_TYPE_ATTRIBUTE_WHICH_MUST_BE_A_STRING_OF_LENGTH_1 = "class must define a '_type_' attribute which must be a string of length 1";
    public static final String WHICH_MUST_BE_A_SINGLE_CHARACTER_STRING_CONTAINING_ONE_OF_S = "class must define a '_type_' attribute which must be\n" +
                    "a single character string containing one of '%s'.";
    public static final String TYPE_S_NOT_SUPPORTED = "_type_ '%s' not supported";
    public static final String S_IS_SPECIFIED_IN_ANONYMOUS_BUT_NOT_IN_FIELDS = "'%s' is specified in _anonymous_ but not in _fields_";
    public static final String ANONYMOUS_MUST_BE_A_SEQUENCE = "_anonymous_ must be a sequence";
    public static final String ABSTRACT_CLASS = "abstract class";
    public static final String UNEXPECTED_TYPE = "unexpected type";
    public static final String FIELDS_MUST_BE_A_SEQUENCE = "_fields_ must be a sequence";
    public static final String TOO_MANY_INITIALIZERS = "too many initializers";
    public static final String DUPLICATE_VALUES_FOR_FIELD_S = "duplicate values for field %s";
    public static final String EXPECTED_S_INSTANCE_INSTEAD_OF_POINTER_TO_S = "expected %s instance instead of pointer to %s";
    public static final String CTYPES_OBJECTS_CONTAINING_POINTERS_CANNOT_BE_PICKLED = "ctypes objects containing pointers cannot be pickled";
    public static final String S_DICT_MUST_BE_A_DICTIONARY_NOT_S = "%s.__dict__ must be a dictionary, not %s";
    public static final String STRING_TOO_LONG = "string too long";
    public static final String UNICODE_STRING_EXPECTED_INSTEAD_OF_S_INSTANCE = "unicode string expected instead of %s instance";
    public static final String BYTES_EXPECTED_INSTEAD_OF_S_INSTANCE = "bytes expected instead of %s instance";
    public static final String BYTE_STRING_TOO_LONG = "byte string too long";
    public static final String UNKNOWN_CLOCK = "unknown clock";
    public static final String S_ARG_N_MUST_SUPPORT_ITERATION = "%s arg %d must support iteration";
    public static final String REDUCE_EMPTY_SEQ = "reduce() of empty sequence with no initial value";
    public static final String OTHER_ARG_MUST_BE_KEY = "other argument must be K instance";
    public static final String INVALID_PARTIAL_STATE = "invalid partial state";
    public static final String LOST_S = "lost %s";

    // ssl error messages
    public static final String SSL_ERR_DECODING_PEM_FILE_S = "Error decoding PEM-encoded file: %s";
    public static final String SSL_ERR_DECODING_PEM_FILE_UNEXPECTED_S = "Error decoding PEM-encoded file: unexpected type %s";
    public static final String SSL_ERR_DECODING_PEM_FILE = "Error decoding PEM-encoded file";
    public static final String SSL_CANT_OPEN_FILE_S = "Can't open file: %s";
    public static final String SSL_CANNOT_WRITE_AFTER_EOF = "cannot write() after write_eof()";

    // syntax errors
    public static final String MISSING_PARENTHESES_IN_CALL_TO_EXEC = "Missing parentheses in call to 'exec'";
    public static final String MISSING_PARENTHESES_IN_CALL_TO_PRINT = "Missing parentheses in call to 'print'. Did you mean print(%s%s)?";

    // pickle errors
    public static final String CANNOT_PICKLE_OBJECT_TYPE = "cannot pickle '%p' object";

    // csv errors
    public static final String MUST_BE_ONE_CHARACTER_STRING = "\"%s\" must be a 1-character string";
    public static final String DELIMITER_MUST_BE_ONE_CHAR_STRING = "\"delimiter\" must be a 1-character string";
    public static final String QUOTECHAR_MUST_BE_SET_IF_QUOTING_ENABLED = "quotechar must be set if quoting enabled";
    public static final String LINETERMINATOR_MUST_BE_SET = "lineterminator must be set";
    public static final String BAD_QUOTING_VALUE = "bad \"quoting\" value";
    public static final String S_EXPECTED_AFTER_S = "'%s' expected after '%s'";
    public static final String NEWLINE_IN_UNQOUTED_FIELD = "new-line character seen in unquoted field - do you need to open the file in universal-newline mode?";
    public static final String LARGER_THAN_FIELD_SIZE_LIMIT = "field larger than field limit (%d)";
    public static final String UNEXPECTED_END_OF_DATA = "unexpected end of data";
    public static final String WRONG_ITERATOR_RETURN_TYPE = "iterator should return strings, not %.200s (the file should be opened in text mode)";
    public static final String LINE_CONTAINS_NULL_BYTE = "line contains NUL";
    public static final String EXPECTED_ITERABLE_NOT_S = "iterable expected, not %.200s";
    public static final String EMPTY_FIELD_RECORD_MUST_BE_QUOTED = "single empty field record must be quoted";
    public static final String ESCAPE_WITHOUT_ESCAPECHAR = "need to escape, but no escapechar set";
    public static final String S_MUST_HAVE_WRITE_METHOD = "%s must have \"write\" method";

    // frozen module errors
    public static final String NO_SUCH_FROZEN_OBJECT = "No such frozen object named %s";
    public static final String FROZEN_DISABLED = "Frozen modules are disabled and the frozen object named %s is not essential";
    public static final String FROZEN_EXCLUDED = "Excluded frozen object named %s";
    public static final String FROZEN_INVALID = "Frozen object named %s is invalid";
    public static final String NOT_A_CODE_OBJECT = "frozen object %s is not a code object";
    public static final String MODULE_NOT_FOUND = "Loaded module %s not found in sys.modules";

    // warnings
    public static final String WARN_P_RETURNED_NON_P = "%p.%s returned non-%s (type %p). " +
                    "The ability to return an instance of a strict subclass of %s " +
                    "is deprecated, and may be removed in a future version of Python.";
    public static final String WARN_INT_CONVERSION_DEPRECATED = "an integer is required (got type %p).  " +
                    "Implicit conversion to integers using __int__ is deprecated, " +
                    "and may be removed in a future version of Python.";
    public static final String WARN_CANNOT_RUN_PDB_YET = "Graal Python cannot run pdb, yet, consider using `--inspect` on the commandline";
    public static final String WARN_IGNORE_UNIMPORTABLE_BREAKPOINT_S = "Ignoring unimportable $PYTHONBREAKPOINT: \"%s\"";
    public static final String WARN_DEPRECTATED_SYS_CHECKINTERVAL = "sys.getcheckinterval() and sys.setcheckinterval() " +
                    "are deprecated.  Use sys.getswitchinterval() instead.";
}
